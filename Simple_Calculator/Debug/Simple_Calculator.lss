
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003658  000036ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080007a  0080007a  00003706  2**0
                  ALLOC
  3 .stab         00002a24  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e7  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007213  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007353  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ada4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b95f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 18 	call	0x30ae	; 0x30ae <main>
      8a:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <add>:
 *      Author: Ahmed
 */



int add(int a,int b){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <add+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <add+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	6b 83       	std	Y+3, r22	; 0x03
	return a+b;
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
}
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <sub>:

int sub(int a,int b){
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <sub+0x6>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <sub+0x8>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	7c 83       	std	Y+4, r23	; 0x04
     b86:	6b 83       	std	Y+3, r22	; 0x03
	return a-b;
     b88:	29 81       	ldd	r18, Y+1	; 0x01
     b8a:	3a 81       	ldd	r19, Y+2	; 0x02
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	a9 01       	movw	r20, r18
     b92:	48 1b       	sub	r20, r24
     b94:	59 0b       	sbc	r21, r25
     b96:	ca 01       	movw	r24, r20
}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <mul>:

int mul(int a, int b){
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <mul+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <mul+0x8>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	7c 83       	std	Y+4, r23	; 0x04
     bb8:	6b 83       	std	Y+3, r22	; 0x03
	return a*b;
     bba:	29 81       	ldd	r18, Y+1	; 0x01
     bbc:	3a 81       	ldd	r19, Y+2	; 0x02
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	ac 01       	movw	r20, r24
     bc4:	24 9f       	mul	r18, r20
     bc6:	c0 01       	movw	r24, r0
     bc8:	25 9f       	mul	r18, r21
     bca:	90 0d       	add	r25, r0
     bcc:	34 9f       	mul	r19, r20
     bce:	90 0d       	add	r25, r0
     bd0:	11 24       	eor	r1, r1
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <division>:

int division(int a,int b){
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <division+0x6>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <division+0x8>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	7c 83       	std	Y+4, r23	; 0x04
     bf2:	6b 83       	std	Y+3, r22	; 0x03
	return a/b;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	2b 81       	ldd	r18, Y+3	; 0x03
     bfa:	3c 81       	ldd	r19, Y+4	; 0x04
     bfc:	b9 01       	movw	r22, r18
     bfe:	0e 94 96 19 	call	0x332c	; 0x332c <__divmodhi4>
     c02:	cb 01       	movw	r24, r22
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <operation>:

int operation(int (*ptr_func)(int,int),int a,int b)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <operation+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <operation+0x8>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <operation+0xa>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	7c 83       	std	Y+4, r23	; 0x04
     c26:	6b 83       	std	Y+3, r22	; 0x03
     c28:	5e 83       	std	Y+6, r21	; 0x06
     c2a:	4d 83       	std	Y+5, r20	; 0x05
	return (*ptr_func)(a,b);
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	2d 81       	ldd	r18, Y+5	; 0x05
     c32:	3e 81       	ldd	r19, Y+6	; 0x06
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	b9 01       	movw	r22, r18
     c3a:	09 95       	icall
}
     c3c:	26 96       	adiw	r28, 0x06	; 6
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <GPIO_setupPinDirection+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <GPIO_setupPinDirection+0x8>
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	6a 83       	std	Y+2, r22	; 0x02
     c60:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	88 30       	cpi	r24, 0x08	; 8
     c66:	08 f0       	brcs	.+2      	; 0xc6a <GPIO_setupPinDirection+0x1c>
     c68:	d5 c0       	rjmp	.+426    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <GPIO_setupPinDirection+0x24>
     c70:	d1 c0       	rjmp	.+418    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3d 83       	std	Y+5, r19	; 0x05
     c7a:	2c 83       	std	Y+4, r18	; 0x04
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	9d 81       	ldd	r25, Y+5	; 0x05
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <GPIO_setupPinDirection+0x3a>
     c86:	43 c0       	rjmp	.+134    	; 0xd0e <GPIO_setupPinDirection+0xc0>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f4       	brge	.+10     	; 0xc9c <GPIO_setupPinDirection+0x4e>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	71 f0       	breq	.+28     	; 0xcb6 <GPIO_setupPinDirection+0x68>
     c9a:	bc c0       	rjmp	.+376    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
     c9c:	2c 81       	ldd	r18, Y+4	; 0x04
     c9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ca0:	22 30       	cpi	r18, 0x02	; 2
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <GPIO_setupPinDirection+0x5a>
     ca6:	5f c0       	rjmp	.+190    	; 0xd66 <GPIO_setupPinDirection+0x118>
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <GPIO_setupPinDirection+0x66>
     cb2:	85 c0       	rjmp	.+266    	; 0xdbe <GPIO_setupPinDirection+0x170>
     cb4:	af c0       	rjmp	.+350    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x8c>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x88>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	98 c0       	rjmp	.+304    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ce4:	aa e3       	ldi	r26, 0x3A	; 58
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ea e3       	ldi	r30, 0x3A	; 58
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0xb4>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0xb0>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	83 c0       	rjmp	.+262    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	a1 f4       	brne	.+40     	; 0xd3c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d14:	a7 e3       	ldi	r26, 0x37	; 55
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e3       	ldi	r30, 0x37	; 55
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <GPIO_setupPinDirection+0xe4>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <GPIO_setupPinDirection+0xe0>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	6c c0       	rjmp	.+216    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <GPIO_setupPinDirection+0x10c>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <GPIO_setupPinDirection+0x108>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	57 c0       	rjmp	.+174    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d6c:	a4 e3       	ldi	r26, 0x34	; 52
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e4 e3       	ldi	r30, 0x34	; 52
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <GPIO_setupPinDirection+0x13c>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <GPIO_setupPinDirection+0x138>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	40 c0       	rjmp	.+128    	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d94:	a4 e3       	ldi	r26, 0x34	; 52
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e4 e3       	ldi	r30, 0x34	; 52
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <GPIO_setupPinDirection+0x164>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <GPIO_setupPinDirection+0x160>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	2b c0       	rjmp	.+86     	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	a1 f4       	brne	.+40     	; 0xdec <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dc4:	a1 e3       	ldi	r26, 0x31	; 49
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e1 e3       	ldi	r30, 0x31	; 49
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <GPIO_setupPinDirection+0x194>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <GPIO_setupPinDirection+0x190>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     dec:	a1 e3       	ldi	r26, 0x31	; 49
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e1 e3       	ldi	r30, 0x31	; 49
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <GPIO_setupPinDirection+0x1bc>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <GPIO_setupPinDirection+0x1b8>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <GPIO_writePin+0x6>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <GPIO_writePin+0x8>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	6a 83       	std	Y+2, r22	; 0x02
     e36:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <GPIO_writePin+0x1c>
     e3e:	d5 c0       	rjmp	.+426    	; 0xfea <GPIO_writePin+0x1c6>
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	08 f0       	brcs	.+2      	; 0xe48 <GPIO_writePin+0x24>
     e46:	d1 c0       	rjmp	.+418    	; 0xfea <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <GPIO_writePin+0x3a>
     e5c:	43 c0       	rjmp	.+134    	; 0xee4 <GPIO_writePin+0xc0>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <GPIO_writePin+0x4e>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	71 f0       	breq	.+28     	; 0xe8c <GPIO_writePin+0x68>
     e70:	bc c0       	rjmp	.+376    	; 0xfea <GPIO_writePin+0x1c6>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <GPIO_writePin+0x5a>
     e7c:	5f c0       	rjmp	.+190    	; 0xf3c <GPIO_writePin+0x118>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <GPIO_writePin+0x66>
     e88:	85 c0       	rjmp	.+266    	; 0xf94 <GPIO_writePin+0x170>
     e8a:	af c0       	rjmp	.+350    	; 0xfea <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e92:	ab e3       	ldi	r26, 0x3B	; 59
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e3       	ldi	r30, 0x3B	; 59
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x8c>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x88>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	98 c0       	rjmp	.+304    	; 0xfea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     eba:	ab e3       	ldi	r26, 0x3B	; 59
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e3       	ldi	r30, 0x3B	; 59
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0xb4>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0xb0>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	83 c0       	rjmp	.+262    	; 0xfea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	a1 f4       	brne	.+40     	; 0xf12 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_writePin+0xe4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_writePin+0xe0>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	6c c0       	rjmp	.+216    	; 0xfea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f12:	a8 e3       	ldi	r26, 0x38	; 56
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e3       	ldi	r30, 0x38	; 56
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writePin+0x10c>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_writePin+0x108>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	57 c0       	rjmp	.+174    	; 0xfea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_writePin+0x13c>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_writePin+0x138>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	40 c0       	rjmp	.+128    	; 0xfea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_writePin+0x164>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_writePin+0x160>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	2b c0       	rjmp	.+86     	; 0xfea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	a1 f4       	brne	.+40     	; 0xfc2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f9a:	a2 e3       	ldi	r26, 0x32	; 50
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_writePin+0x194>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_writePin+0x190>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     fc2:	a2 e3       	ldi	r26, 0x32	; 50
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e2 e3       	ldi	r30, 0x32	; 50
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <GPIO_writePin+0x1bc>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <GPIO_writePin+0x1b8>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <GPIO_readPin+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <GPIO_readPin+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    100c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	08 f0       	brcs	.+2      	; 0x1016 <GPIO_readPin+0x1c>
    1014:	84 c0       	rjmp	.+264    	; 0x111e <GPIO_readPin+0x124>
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	08 f0       	brcs	.+2      	; 0x101e <GPIO_readPin+0x24>
    101c:	80 c0       	rjmp	.+256    	; 0x111e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3d 83       	std	Y+5, r19	; 0x05
    1026:	2c 83       	std	Y+4, r18	; 0x04
    1028:	4c 81       	ldd	r20, Y+4	; 0x04
    102a:	5d 81       	ldd	r21, Y+5	; 0x05
    102c:	41 30       	cpi	r20, 0x01	; 1
    102e:	51 05       	cpc	r21, r1
    1030:	79 f1       	breq	.+94     	; 0x1090 <GPIO_readPin+0x96>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	91 05       	cpc	r25, r1
    103a:	34 f4       	brge	.+12     	; 0x1048 <GPIO_readPin+0x4e>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	21 15       	cp	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	69 f0       	breq	.+26     	; 0x1060 <GPIO_readPin+0x66>
    1046:	6b c0       	rjmp	.+214    	; 0x111e <GPIO_readPin+0x124>
    1048:	4c 81       	ldd	r20, Y+4	; 0x04
    104a:	5d 81       	ldd	r21, Y+5	; 0x05
    104c:	42 30       	cpi	r20, 0x02	; 2
    104e:	51 05       	cpc	r21, r1
    1050:	b9 f1       	breq	.+110    	; 0x10c0 <GPIO_readPin+0xc6>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <GPIO_readPin+0x64>
    105c:	49 c0       	rjmp	.+146    	; 0x10f0 <GPIO_readPin+0xf6>
    105e:	5f c0       	rjmp	.+190    	; 0x111e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1060:	e9 e3       	ldi	r30, 0x39	; 57
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_readPin+0x7e>
    1074:	55 95       	asr	r21
    1076:	47 95       	ror	r20
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_readPin+0x7a>
    107c:	ca 01       	movw	r24, r20
    107e:	81 70       	andi	r24, 0x01	; 1
    1080:	90 70       	andi	r25, 0x00	; 0
    1082:	88 23       	and	r24, r24
    1084:	19 f0       	breq	.+6      	; 0x108c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	49 c0       	rjmp	.+146    	; 0x111e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    108c:	19 82       	std	Y+1, r1	; 0x01
    108e:	47 c0       	rjmp	.+142    	; 0x111e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1090:	e6 e3       	ldi	r30, 0x36	; 54
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_readPin+0xae>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_readPin+0xaa>
    10ac:	ca 01       	movw	r24, r20
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	90 70       	andi	r25, 0x00	; 0
    10b2:	88 23       	and	r24, r24
    10b4:	19 f0       	breq	.+6      	; 0x10bc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	31 c0       	rjmp	.+98     	; 0x111e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	2f c0       	rjmp	.+94     	; 0x111e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10c0:	e3 e3       	ldi	r30, 0x33	; 51
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_readPin+0xde>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_readPin+0xda>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	19 c0       	rjmp	.+50     	; 0x111e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ec:	19 82       	std	Y+1, r1	; 0x01
    10ee:	17 c0       	rjmp	.+46     	; 0x111e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10f0:	e0 e3       	ldi	r30, 0x30	; 48
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_readPin+0x10e>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_readPin+0x10a>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	88 23       	and	r24, r24
    1114:	19 f0       	breq	.+6      	; 0x111c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	01 c0       	rjmp	.+2      	; 0x111e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    111c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <GPIO_setupPortDirection+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <GPIO_setupPortDirection+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	90 f5       	brcc	.+100    	; 0x11aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3c 83       	std	Y+4, r19	; 0x04
    114e:	2b 83       	std	Y+3, r18	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	d1 f0       	breq	.+52     	; 0x118e <GPIO_setupPortDirection+0x5e>
    115a:	2b 81       	ldd	r18, Y+3	; 0x03
    115c:	3c 81       	ldd	r19, Y+4	; 0x04
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <GPIO_setupPortDirection+0x3e>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	61 f0       	breq	.+24     	; 0x1184 <GPIO_setupPortDirection+0x54>
    116c:	1e c0       	rjmp	.+60     	; 0x11aa <GPIO_setupPortDirection+0x7a>
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <GPIO_setupPortDirection+0x68>
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	81 f0       	breq	.+32     	; 0x11a2 <GPIO_setupPortDirection+0x72>
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1184:	ea e3       	ldi	r30, 0x3A	; 58
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    118e:	e7 e3       	ldi	r30, 0x37	; 55
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1198:	e4 e3       	ldi	r30, 0x34	; 52
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <GPIO_writePort+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <GPIO_writePort+0x8>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	90 f5       	brcc	.+100    	; 0x1232 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3c 83       	std	Y+4, r19	; 0x04
    11d6:	2b 83       	std	Y+3, r18	; 0x03
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	d1 f0       	breq	.+52     	; 0x1216 <GPIO_writePort+0x5e>
    11e2:	2b 81       	ldd	r18, Y+3	; 0x03
    11e4:	3c 81       	ldd	r19, Y+4	; 0x04
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <GPIO_writePort+0x3e>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	61 f0       	breq	.+24     	; 0x120c <GPIO_writePort+0x54>
    11f4:	1e c0       	rjmp	.+60     	; 0x1232 <GPIO_writePort+0x7a>
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <GPIO_writePort+0x68>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	81 f0       	breq	.+32     	; 0x122a <GPIO_writePort+0x72>
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	80 83       	st	Z, r24
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	80 83       	st	Z, r24
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	80 83       	st	Z, r24
			break;
		}
	}
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_readPort+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_readPort+0x8>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    124e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	90 f5       	brcc	.+100    	; 0x12ba <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	d1 f0       	breq	.+52     	; 0x129e <GPIO_readPort+0x5e>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <GPIO_readPort+0x3e>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	61 f0       	breq	.+24     	; 0x1294 <GPIO_readPort+0x54>
    127c:	1e c0       	rjmp	.+60     	; 0x12ba <GPIO_readPort+0x7a>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <GPIO_readPort+0x68>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <GPIO_readPort+0x72>
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1294:	e9 e3       	ldi	r30, 0x39	; 57
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    129e:	e6 e3       	ldi	r30, 0x36	; 54
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12a8:	e3 e3       	ldi	r30, 0x33	; 51
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12b2:	e0 e3       	ldi	r30, 0x30	; 48
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	60 97       	sbiw	r28, 0x10	; 16
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	64 e0       	ldi	r22, 0x04	; 4
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	65 e0       	ldi	r22, 0x05	; 5
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	66 e0       	ldi	r22, 0x06	; 6
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	67 e0       	ldi	r22, 0x07	; 7
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	64 e0       	ldi	r22, 0x04	; 4
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	65 e0       	ldi	r22, 0x05	; 5
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    132e:	1f 86       	std	Y+15, r1	; 0x0f
    1330:	bd c0       	rjmp	.+378    	; 0x14ac <KEYPAD_getPressedKey+0x1e2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1332:	8f 85       	ldd	r24, Y+15	; 0x0f
    1334:	98 2f       	mov	r25, r24
    1336:	9c 5f       	subi	r25, 0xFC	; 252
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	69 2f       	mov	r22, r25
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1342:	8f 85       	ldd	r24, Y+15	; 0x0f
    1344:	98 2f       	mov	r25, r24
    1346:	9c 5f       	subi	r25, 0xFC	; 252
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	69 2f       	mov	r22, r25
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1352:	18 8a       	std	Y+16, r1	; 0x10
    1354:	2b c0       	rjmp	.+86     	; 0x13ac <KEYPAD_getPressedKey+0xe2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1356:	88 89       	ldd	r24, Y+16	; 0x10
    1358:	98 2f       	mov	r25, r24
    135a:	9e 5f       	subi	r25, 0xFE	; 254
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	69 2f       	mov	r22, r25
    1360:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_readPin>
    1364:	88 23       	and	r24, r24
    1366:	f9 f4       	brne	.+62     	; 0x13a6 <KEYPAD_getPressedKey+0xdc>
				{
					while (GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	98 2f       	mov	r25, r24
    136c:	9e 5f       	subi	r25, 0xFE	; 254
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	69 2f       	mov	r22, r25
    1372:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_readPin>
    1376:	88 23       	and	r24, r24
    1378:	b9 f3       	breq	.-18     	; 0x1368 <KEYPAD_getPressedKey+0x9e>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	98 2f       	mov	r25, r24
    138a:	88 89       	ldd	r24, Y+16	; 0x10
    138c:	89 0f       	add	r24, r25
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
		//return '$';
	}	
}
    1394:	60 96       	adiw	r28, 0x10	; 16
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    13a6:	88 89       	ldd	r24, Y+16	; 0x10
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	88 8b       	std	Y+16, r24	; 0x10
    13ac:	88 89       	ldd	r24, Y+16	; 0x10
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	90 f2       	brcs	.-92     	; 0x1356 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    13b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b4:	98 2f       	mov	r25, r24
    13b6:	9c 5f       	subi	r25, 0xFC	; 252
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	69 2f       	mov	r22, r25
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 ea       	ldi	r26, 0xA0	; 160
    13c8:	b0 e4       	ldi	r27, 0x40	; 64
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <KEYPAD_getPressedKey+0x1aa>
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <KEYPAD_getPressedKey+0x198>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <KEYPAD_getPressedKey+0x18c>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <KEYPAD_getPressedKey+0x1d4>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    14a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	8f 87       	std	Y+15, r24	; 0x0f
    14ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	08 f4       	brcc	.+2      	; 0x14b4 <KEYPAD_getPressedKey+0x1ea>
    14b2:	3f cf       	rjmp	.-386    	; 0x1332 <KEYPAD_getPressedKey+0x68>
    14b4:	3c cf       	rjmp	.-392    	; 0x132e <KEYPAD_getPressedKey+0x64>

000014b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <KEYPAD_4x4_adjustKeyNumber+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    14c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3c 83       	std	Y+4, r19	; 0x04
    14ce:	2b 83       	std	Y+3, r18	; 0x03
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    14da:	70 c0       	rjmp	.+224    	; 0x15bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	29 30       	cpi	r18, 0x09	; 9
    14e2:	31 05       	cpc	r19, r1
    14e4:	5c f5       	brge	.+86     	; 0x153c <KEYPAD_4x4_adjustKeyNumber+0x86>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    14f0:	59 c0       	rjmp	.+178    	; 0x15a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	25 30       	cpi	r18, 0x05	; 5
    14f8:	31 05       	cpc	r19, r1
    14fa:	9c f4       	brge	.+38     	; 0x1522 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1506:	48 c0       	rjmp	.+144    	; 0x1598 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	23 30       	cpi	r18, 0x03	; 3
    150e:	31 05       	cpc	r19, r1
    1510:	0c f0       	brlt	.+2      	; 0x1514 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1512:	45 c0       	rjmp	.+138    	; 0x159e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    151e:	39 c0       	rjmp	.+114    	; 0x1592 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1520:	67 c0       	rjmp	.+206    	; 0x15f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	26 30       	cpi	r18, 0x06	; 6
    1528:	31 05       	cpc	r19, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <KEYPAD_4x4_adjustKeyNumber+0x78>
    152c:	41 c0       	rjmp	.+130    	; 0x15b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	87 30       	cpi	r24, 0x07	; 7
    1534:	91 05       	cpc	r25, r1
    1536:	0c f0       	brlt	.+2      	; 0x153a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1538:	3e c0       	rjmp	.+124    	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    153a:	37 c0       	rjmp	.+110    	; 0x15aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	3c 81       	ldd	r19, Y+4	; 0x04
    1540:	2c 30       	cpi	r18, 0x0C	; 12
    1542:	31 05       	cpc	r19, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1546:	46 c0       	rjmp	.+140    	; 0x15d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	8d 30       	cpi	r24, 0x0D	; 13
    154e:	91 05       	cpc	r25, r1
    1550:	5c f4       	brge	.+22     	; 0x1568 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	2a 30       	cpi	r18, 0x0A	; 10
    1558:	31 05       	cpc	r19, r1
    155a:	b1 f1       	breq	.+108    	; 0x15c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	8b 30       	cpi	r24, 0x0B	; 11
    1562:	91 05       	cpc	r25, r1
    1564:	a4 f5       	brge	.+104    	; 0x15ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    1566:	2d c0       	rjmp	.+90     	; 0x15c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	2e 30       	cpi	r18, 0x0E	; 14
    156e:	31 05       	cpc	r19, r1
    1570:	b9 f1       	breq	.+110    	; 0x15e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	8e 30       	cpi	r24, 0x0E	; 14
    1578:	91 05       	cpc	r25, r1
    157a:	7c f1       	brlt	.+94     	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x124>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	2f 30       	cpi	r18, 0x0F	; 15
    1582:	31 05       	cpc	r19, r1
    1584:	79 f1       	breq	.+94     	; 0x15e4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	80 31       	cpi	r24, 0x10	; 16
    158c:	91 05       	cpc	r25, r1
    158e:	69 f1       	breq	.+90     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x134>
    1590:	2f c0       	rjmp	.+94     	; 0x15f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1592:	87 e0       	ldi	r24, 0x07	; 7
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	2e c0       	rjmp	.+92     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1598:	88 e0       	ldi	r24, 0x08	; 8
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	2b c0       	rjmp	.+86     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    159e:	89 e0       	ldi	r24, 0x09	; 9
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	28 c0       	rjmp	.+80     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    15a4:	85 e2       	ldi	r24, 0x25	; 37
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	25 c0       	rjmp	.+74     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	22 c0       	rjmp	.+68     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	1f c0       	rjmp	.+62     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	1c c0       	rjmp	.+56     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    15bc:	8a e2       	ldi	r24, 0x2A	; 42
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	19 c0       	rjmp	.+50     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	16 c0       	rjmp	.+44     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	10 c0       	rjmp	.+32     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    15d4:	8d e2       	ldi	r24, 0x2D	; 45
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    15da:	8d e0       	ldi	r24, 0x0D	; 13
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	0a c0       	rjmp	.+20     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    15e0:	19 82       	std	Y+1, r1	; 0x01
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    15e4:	8d e3       	ldi	r24, 0x3D	; 61
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    15ea:	8b e2       	ldi	r24, 0x2B	; 43
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	2e 97       	sbiw	r28, 0x0e	; 14
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 ea       	ldi	r26, 0xA0	; 160
    1632:	b1 e4       	ldi	r27, 0x41	; 65
    1634:	8b 87       	std	Y+11, r24	; 0x0b
    1636:	9c 87       	std	Y+12, r25	; 0x0c
    1638:	ad 87       	std	Y+13, r26	; 0x0d
    163a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	6b 85       	ldd	r22, Y+11	; 0x0b
    163e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a e7       	ldi	r20, 0x7A	; 122
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8f 83       	std	Y+7, r24	; 0x07
    1656:	98 87       	std	Y+8, r25	; 0x08
    1658:	a9 87       	std	Y+9, r26	; 0x09
    165a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <LCD_init+0x7a>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <LCD_init+0xf8>
	else if (__tmp > 65535)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	0f c0       	rjmp	.+30     	; 0x16de <LCD_init+0xda>
    16c0:	80 e9       	ldi	r24, 0x90	; 144
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_init+0xc8>
    16d0:	9c 83       	std	Y+4, r25	; 0x04
    16d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <LCD_init+0xbc>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_init+0x104>
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	63 e0       	ldi	r22, 0x03	; 3
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	65 e0       	ldi	r22, 0x05	; 5
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	66 e0       	ldi	r22, 0x06	; 6
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1738:	83 e3       	ldi	r24, 0x33	; 51
    173a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    173e:	82 e3       	ldi	r24, 0x32	; 50
    1740:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1744:	88 e2       	ldi	r24, 0x28	; 40
    1746:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    174a:	8c e0       	ldi	r24, 0x0C	; 12
    174c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
}
    1756:	2e 96       	adiw	r28, 0x0e	; 14
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	c3 56       	subi	r28, 0x63	; 99
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	fe 01       	movw	r30, r28
    1784:	ed 59       	subi	r30, 0x9D	; 157
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1794:	fe 01       	movw	r30, r28
    1796:	e1 5a       	subi	r30, 0xA1	; 161
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	80 83       	st	Z, r24
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	a2 83       	std	Z+2, r26	; 0x02
    17a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	8e 01       	movw	r16, r28
    17ac:	05 5a       	subi	r16, 0xA5	; 165
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	fe 01       	movw	r30, r28
    17b2:	e1 5a       	subi	r30, 0xA1	; 161
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	55 e4       	ldi	r21, 0x45	; 69
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	f8 01       	movw	r30, r16
    17d0:	80 83       	st	Z, r24
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	a2 83       	std	Z+2, r26	; 0x02
    17d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d8:	fe 01       	movw	r30, r28
    17da:	e5 5a       	subi	r30, 0xA5	; 165
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	44 f4       	brge	.+16     	; 0x1806 <LCD_sendCommand+0x9e>
		__ticks = 1;
    17f6:	fe 01       	movw	r30, r28
    17f8:	e7 5a       	subi	r30, 0xA7	; 167
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	64 c0       	rjmp	.+200    	; 0x18ce <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1806:	fe 01       	movw	r30, r28
    1808:	e5 5a       	subi	r30, 0xA5	; 165
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	0c f0       	brlt	.+2      	; 0x1826 <LCD_sendCommand+0xbe>
    1824:	43 c0       	rjmp	.+134    	; 0x18ac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	fe 01       	movw	r30, r28
    1828:	e1 5a       	subi	r30, 0xA1	; 161
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8e 01       	movw	r16, r28
    1846:	07 5a       	subi	r16, 0xA7	; 167
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	1f c0       	rjmp	.+62     	; 0x189c <LCD_sendCommand+0x134>
    185e:	fe 01       	movw	r30, r28
    1860:	e9 5a       	subi	r30, 0xA9	; 169
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 e9       	ldi	r24, 0x90	; 144
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
    186c:	fe 01       	movw	r30, r28
    186e:	e9 5a       	subi	r30, 0xA9	; 169
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_sendCommand+0x10e>
    187a:	fe 01       	movw	r30, r28
    187c:	e9 5a       	subi	r30, 0xA9	; 169
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	de 01       	movw	r26, r28
    1886:	a7 5a       	subi	r26, 0xA7	; 167
    1888:	bf 4f       	sbci	r27, 0xFF	; 255
    188a:	fe 01       	movw	r30, r28
    188c:	e7 5a       	subi	r30, 0xA7	; 167
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	fe 01       	movw	r30, r28
    189e:	e7 5a       	subi	r30, 0xA7	; 167
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	d1 f6       	brne	.-76     	; 0x185e <LCD_sendCommand+0xf6>
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	8e 01       	movw	r16, r28
    18ae:	07 5a       	subi	r16, 0xA7	; 167
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e5 5a       	subi	r30, 0xA5	; 165
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	de 01       	movw	r26, r28
    18d0:	ab 5a       	subi	r26, 0xAB	; 171
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5a       	subi	r30, 0xA7	; 167
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	8d 93       	st	X+, r24
    18e0:	9c 93       	st	X, r25
    18e2:	fe 01       	movw	r30, r28
    18e4:	eb 5a       	subi	r30, 0xAB	; 171
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0x184>
    18f0:	fe 01       	movw	r30, r28
    18f2:	eb 5a       	subi	r30, 0xAB	; 171
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1904:	fe 01       	movw	r30, r28
    1906:	ef 5a       	subi	r30, 0xAF	; 175
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	8e 01       	movw	r16, r28
    191c:	03 5b       	subi	r16, 0xB3	; 179
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	ef 5a       	subi	r30, 0xAF	; 175
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a e7       	ldi	r20, 0x7A	; 122
    1934:	55 e4       	ldi	r21, 0x45	; 69
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	80 83       	st	Z, r24
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	a2 83       	std	Z+2, r26	; 0x02
    1946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1948:	fe 01       	movw	r30, r28
    194a:	e3 5b       	subi	r30, 0xB3	; 179
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	44 f4       	brge	.+16     	; 0x1976 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1966:	fe 01       	movw	r30, r28
    1968:	e5 5b       	subi	r30, 0xB5	; 181
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	64 c0       	rjmp	.+200    	; 0x1a3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1976:	fe 01       	movw	r30, r28
    1978:	e3 5b       	subi	r30, 0xB3	; 179
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	0c f0       	brlt	.+2      	; 0x1996 <LCD_sendCommand+0x22e>
    1994:	43 c0       	rjmp	.+134    	; 0x1a1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	fe 01       	movw	r30, r28
    1998:	ef 5a       	subi	r30, 0xAF	; 175
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8e 01       	movw	r16, r28
    19b6:	05 5b       	subi	r16, 0xB5	; 181
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	1f c0       	rjmp	.+62     	; 0x1a0c <LCD_sendCommand+0x2a4>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e7 5b       	subi	r30, 0xB7	; 183
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	fe 01       	movw	r30, r28
    19de:	e7 5b       	subi	r30, 0xB7	; 183
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_sendCommand+0x27e>
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5b       	subi	r30, 0xB7	; 183
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	de 01       	movw	r26, r28
    19f6:	a5 5b       	subi	r26, 0xB5	; 181
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 5b       	subi	r30, 0xB5	; 181
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	11 96       	adiw	r26, 0x01	; 1
    1a08:	9c 93       	st	X, r25
    1a0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5b       	subi	r30, 0xB5	; 181
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	d1 f6       	brne	.-76     	; 0x19ce <LCD_sendCommand+0x266>
    1a1a:	27 c0       	rjmp	.+78     	; 0x1a6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	05 5b       	subi	r16, 0xB5	; 181
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	e3 5b       	subi	r30, 0xB3	; 179
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	de 01       	movw	r26, r28
    1a40:	a9 5b       	subi	r26, 0xB9	; 185
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 5b       	subi	r30, 0xB5	; 181
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	8d 93       	st	X+, r24
    1a50:	9c 93       	st	X, r25
    1a52:	fe 01       	movw	r30, r28
    1a54:	e9 5b       	subi	r30, 0xB9	; 185
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_sendCommand+0x2f4>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e9 5b       	subi	r30, 0xB9	; 185
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 59       	subi	r30, 0x9D	; 157
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 71       	andi	r24, 0x10	; 16
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	95 95       	asr	r25
    1a80:	87 95       	ror	r24
    1a82:	95 95       	asr	r25
    1a84:	87 95       	ror	r24
    1a86:	95 95       	asr	r25
    1a88:	87 95       	ror	r24
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	63 e0       	ldi	r22, 0x03	; 3
    1a90:	49 2f       	mov	r20, r25
    1a92:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1a96:	fe 01       	movw	r30, r28
    1a98:	ed 59       	subi	r30, 0x9D	; 157
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	80 72       	andi	r24, 0x20	; 32
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	95 95       	asr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	95 95       	asr	r25
    1aac:	87 95       	ror	r24
    1aae:	95 95       	asr	r25
    1ab0:	87 95       	ror	r24
    1ab2:	95 95       	asr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	95 95       	asr	r25
    1ab8:	87 95       	ror	r24
    1aba:	98 2f       	mov	r25, r24
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	49 2f       	mov	r20, r25
    1ac2:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ed 59       	subi	r30, 0x9D	; 157
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 74       	andi	r24, 0x40	; 64
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	08 2e       	mov	r0, r24
    1ad8:	89 2f       	mov	r24, r25
    1ada:	00 0c       	add	r0, r0
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	00 0c       	add	r0, r0
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	65 e0       	ldi	r22, 0x05	; 5
    1aec:	49 2f       	mov	r20, r25
    1aee:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 59       	subi	r30, 0x9D	; 157
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	98 2f       	mov	r25, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	99 27       	eor	r25, r25
    1b00:	99 1f       	adc	r25, r25
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	66 e0       	ldi	r22, 0x06	; 6
    1b06:	49 2f       	mov	r20, r25
    1b08:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 5b       	subi	r30, 0xBD	; 189
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e8       	ldi	r26, 0x80	; 128
    1b18:	bf e3       	ldi	r27, 0x3F	; 63
    1b1a:	80 83       	st	Z, r24
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	a2 83       	std	Z+2, r26	; 0x02
    1b20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	8e 01       	movw	r16, r28
    1b24:	01 5c       	subi	r16, 0xC1	; 193
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ed 5b       	subi	r30, 0xBD	; 189
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	55 e4       	ldi	r21, 0x45	; 69
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	80 83       	st	Z, r24
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	a2 83       	std	Z+2, r26	; 0x02
    1b4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b50:	fe 01       	movw	r30, r28
    1b52:	ff 96       	adiw	r30, 0x3f	; 63
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e af       	std	Y+62, r25	; 0x3e
    1b72:	8d af       	std	Y+61, r24	; 0x3d
    1b74:	46 c0       	rjmp	.+140    	; 0x1c02 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1b76:	fe 01       	movw	r30, r28
    1b78:	ff 96       	adiw	r30, 0x3f	; 63
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	64 f5       	brge	.+88     	; 0x1bea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	fe 01       	movw	r30, r28
    1b94:	ed 5b       	subi	r30, 0xBD	; 189
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e af       	std	Y+62, r25	; 0x3e
    1bbe:	8d af       	std	Y+61, r24	; 0x3d
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_sendCommand+0x478>
    1bc2:	80 e9       	ldi	r24, 0x90	; 144
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9c af       	std	Y+60, r25	; 0x3c
    1bc8:	8b af       	std	Y+59, r24	; 0x3b
    1bca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_sendCommand+0x466>
    1bd2:	9c af       	std	Y+60, r25	; 0x3c
    1bd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9e af       	std	Y+62, r25	; 0x3e
    1bde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <LCD_sendCommand+0x45a>
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	fe 01       	movw	r30, r28
    1bec:	ff 96       	adiw	r30, 0x3f	; 63
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e af       	std	Y+62, r25	; 0x3e
    1c00:	8d af       	std	Y+61, r24	; 0x3d
    1c02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c06:	9a af       	std	Y+58, r25	; 0x3a
    1c08:	89 af       	std	Y+57, r24	; 0x39
    1c0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_sendCommand+0x4a6>
    1c12:	9a af       	std	Y+58, r25	; 0x3a
    1c14:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e8       	ldi	r26, 0x80	; 128
    1c26:	bf e3       	ldi	r27, 0x3F	; 63
    1c28:	8d ab       	std	Y+53, r24	; 0x35
    1c2a:	9e ab       	std	Y+54, r25	; 0x36
    1c2c:	af ab       	std	Y+55, r26	; 0x37
    1c2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6d a9       	ldd	r22, Y+53	; 0x35
    1c32:	7e a9       	ldd	r23, Y+54	; 0x36
    1c34:	8f a9       	ldd	r24, Y+55	; 0x37
    1c36:	98 ad       	ldd	r25, Y+56	; 0x38
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a e7       	ldi	r20, 0x7A	; 122
    1c3e:	55 e4       	ldi	r21, 0x45	; 69
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	89 ab       	std	Y+49, r24	; 0x31
    1c4a:	9a ab       	std	Y+50, r25	; 0x32
    1c4c:	ab ab       	std	Y+51, r26	; 0x33
    1c4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c50:	69 a9       	ldd	r22, Y+49	; 0x31
    1c52:	7a a9       	ldd	r23, Y+50	; 0x32
    1c54:	8b a9       	ldd	r24, Y+51	; 0x33
    1c56:	9c a9       	ldd	r25, Y+52	; 0x34
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	98 ab       	std	Y+48, r25	; 0x30
    1c6e:	8f a7       	std	Y+47, r24	; 0x2f
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1c72:	69 a9       	ldd	r22, Y+49	; 0x31
    1c74:	7a a9       	ldd	r23, Y+50	; 0x32
    1c76:	8b a9       	ldd	r24, Y+51	; 0x33
    1c78:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c90:	98 ad       	ldd	r25, Y+56	; 0x38
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	98 ab       	std	Y+48, r25	; 0x30
    1cb0:	8f a7       	std	Y+47, r24	; 0x2f
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <LCD_sendCommand+0x56a>
    1cb4:	80 e9       	ldi	r24, 0x90	; 144
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	9e a7       	std	Y+46, r25	; 0x2e
    1cba:	8d a7       	std	Y+45, r24	; 0x2d
    1cbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_sendCommand+0x558>
    1cc4:	9e a7       	std	Y+46, r25	; 0x2e
    1cc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	98 ab       	std	Y+48, r25	; 0x30
    1cd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <LCD_sendCommand+0x54c>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cde:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	98 ab       	std	Y+48, r25	; 0x30
    1cee:	8f a7       	std	Y+47, r24	; 0x2f
    1cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf4:	9c a7       	std	Y+44, r25	; 0x2c
    1cf6:	8b a7       	std	Y+43, r24	; 0x2b
    1cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_sendCommand+0x594>
    1d00:	9c a7       	std	Y+44, r25	; 0x2c
    1d02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e8       	ldi	r26, 0x80	; 128
    1d14:	bf e3       	ldi	r27, 0x3F	; 63
    1d16:	8f a3       	std	Y+39, r24	; 0x27
    1d18:	98 a7       	std	Y+40, r25	; 0x28
    1d1a:	a9 a7       	std	Y+41, r26	; 0x29
    1d1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d20:	78 a5       	ldd	r23, Y+40	; 0x28
    1d22:	89 a5       	ldd	r24, Y+41	; 0x29
    1d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	55 e4       	ldi	r21, 0x45	; 69
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8b a3       	std	Y+35, r24	; 0x23
    1d38:	9c a3       	std	Y+36, r25	; 0x24
    1d3a:	ad a3       	std	Y+37, r26	; 0x25
    1d3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d40:	7c a1       	ldd	r23, Y+36	; 0x24
    1d42:	8d a1       	ldd	r24, Y+37	; 0x25
    1d44:	9e a1       	ldd	r25, Y+38	; 0x26
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d60:	6b a1       	ldd	r22, Y+35	; 0x23
    1d62:	7c a1       	ldd	r23, Y+36	; 0x24
    1d64:	8d a1       	ldd	r24, Y+37	; 0x25
    1d66:	9e a1       	ldd	r25, Y+38	; 0x26
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9a a3       	std	Y+34, r25	; 0x22
    1d9e:	89 a3       	std	Y+33, r24	; 0x21
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_sendCommand+0x658>
    1da2:	80 e9       	ldi	r24, 0x90	; 144
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	98 a3       	std	Y+32, r25	; 0x20
    1da8:	8f 8f       	std	Y+31, r24	; 0x1f
    1daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dac:	98 a1       	ldd	r25, Y+32	; 0x20
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_sendCommand+0x646>
    1db2:	98 a3       	std	Y+32, r25	; 0x20
    1db4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	89 a1       	ldd	r24, Y+33	; 0x21
    1db8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_sendCommand+0x63a>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9a a3       	std	Y+34, r25	; 0x22
    1ddc:	89 a3       	std	Y+33, r24	; 0x21
    1dde:	89 a1       	ldd	r24, Y+33	; 0x21
    1de0:	9a a1       	ldd	r25, Y+34	; 0x22
    1de2:	9e 8f       	std	Y+30, r25	; 0x1e
    1de4:	8d 8f       	std	Y+29, r24	; 0x1d
    1de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_sendCommand+0x682>
    1dee:	9e 8f       	std	Y+30, r25	; 0x1e
    1df0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 59       	subi	r30, 0x9D	; 157
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	91 70       	andi	r25, 0x01	; 1
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	49 2f       	mov	r20, r25
    1e04:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ed 59       	subi	r30, 0x9D	; 157
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	82 70       	andi	r24, 0x02	; 2
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	95 95       	asr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	49 2f       	mov	r20, r25
    1e24:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ed 59       	subi	r30, 0x9D	; 157
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	84 70       	andi	r24, 0x04	; 4
    1e36:	90 70       	andi	r25, 0x00	; 0
    1e38:	95 95       	asr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	95 95       	asr	r25
    1e3e:	87 95       	ror	r24
    1e40:	98 2f       	mov	r25, r24
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	65 e0       	ldi	r22, 0x05	; 5
    1e46:	49 2f       	mov	r20, r25
    1e48:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 59       	subi	r30, 0x9D	; 157
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 70       	andi	r24, 0x08	; 8
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	95 95       	asr	r25
    1e66:	87 95       	ror	r24
    1e68:	98 2f       	mov	r25, r24
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	66 e0       	ldi	r22, 0x06	; 6
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	89 8f       	std	Y+25, r24	; 0x19
    1e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e80:	ab 8f       	std	Y+27, r26	; 0x1b
    1e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	55 e4       	ldi	r21, 0x45	; 69
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ea0:	af 8b       	std	Y+23, r26	; 0x17
    1ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_sendCommand+0x7be>
    1f08:	80 e9       	ldi	r24, 0x90	; 144
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_sendCommand+0x7ac>
    1f18:	9a 8b       	std	Y+18, r25	; 0x12
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_sendCommand+0x7a0>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	98 89       	ldd	r25, Y+16	; 0x10
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_sendCommand+0x7e8>
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e8       	ldi	r26, 0x80	; 128
    1f68:	bf e3       	ldi	r27, 0x3F	; 63
    1f6a:	8b 87       	std	Y+11, r24	; 0x0b
    1f6c:	9c 87       	std	Y+12, r25	; 0x0c
    1f6e:	ad 87       	std	Y+13, r26	; 0x0d
    1f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a e7       	ldi	r20, 0x7A	; 122
    1f80:	55 e4       	ldi	r21, 0x45	; 69
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	8f 83       	std	Y+7, r24	; 0x07
    1f8c:	98 87       	std	Y+8, r25	; 0x08
    1f8e:	a9 87       	std	Y+9, r26	; 0x09
    1f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f92:	6f 81       	ldd	r22, Y+7	; 0x07
    1f94:	78 85       	ldd	r23, Y+8	; 0x08
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	4c f5       	brge	.+82     	; 0x201e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e2       	ldi	r20, 0x20	; 32
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <LCD_sendCommand+0x8ac>
    1ff6:	80 e9       	ldi	r24, 0x90	; 144
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x89a>
    2006:	9c 83       	std	Y+4, r25	; 0x04
    2008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <LCD_sendCommand+0x88e>
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_sendCommand+0x8d6>
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2046:	cd 59       	subi	r28, 0x9D	; 157
    2048:	df 4f       	sbci	r29, 0xFF	; 255
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	c3 56       	subi	r28, 0x63	; 99
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	fe 01       	movw	r30, r28
    207a:	ed 59       	subi	r30, 0x9D	; 157
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    208a:	fe 01       	movw	r30, r28
    208c:	e1 5a       	subi	r30, 0xA1	; 161
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e8       	ldi	r26, 0x80	; 128
    2096:	bf e3       	ldi	r27, 0x3F	; 63
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	8e 01       	movw	r16, r28
    20a2:	05 5a       	subi	r16, 0xA5	; 165
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	fe 01       	movw	r30, r28
    20a8:	e1 5a       	subi	r30, 0xA1	; 161
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	f8 01       	movw	r30, r16
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 5a       	subi	r30, 0xA5	; 165
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	44 f4       	brge	.+16     	; 0x20fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 5a       	subi	r30, 0xA7	; 167
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
    20fa:	64 c0       	rjmp	.+200    	; 0x21c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    20fc:	fe 01       	movw	r30, r28
    20fe:	e5 5a       	subi	r30, 0xA5	; 165
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	0c f0       	brlt	.+2      	; 0x211c <LCD_displayCharacter+0xbe>
    211a:	43 c0       	rjmp	.+134    	; 0x21a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	fe 01       	movw	r30, r28
    211e:	e1 5a       	subi	r30, 0xA1	; 161
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8e 01       	movw	r16, r28
    213c:	07 5a       	subi	r16, 0xA7	; 167
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	1f c0       	rjmp	.+62     	; 0x2192 <LCD_displayCharacter+0x134>
    2154:	fe 01       	movw	r30, r28
    2156:	e9 5a       	subi	r30, 0xA9	; 169
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 e9       	ldi	r24, 0x90	; 144
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	fe 01       	movw	r30, r28
    2164:	e9 5a       	subi	r30, 0xA9	; 169
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_displayCharacter+0x10e>
    2170:	fe 01       	movw	r30, r28
    2172:	e9 5a       	subi	r30, 0xA9	; 169
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	de 01       	movw	r26, r28
    217c:	a7 5a       	subi	r26, 0xA7	; 167
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e7 5a       	subi	r30, 0xA7	; 167
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	9c 93       	st	X, r25
    2190:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	fe 01       	movw	r30, r28
    2194:	e7 5a       	subi	r30, 0xA7	; 167
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	d1 f6       	brne	.-76     	; 0x2154 <LCD_displayCharacter+0xf6>
    21a0:	27 c0       	rjmp	.+78     	; 0x21f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	8e 01       	movw	r16, r28
    21a4:	07 5a       	subi	r16, 0xA7	; 167
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e5 5a       	subi	r30, 0xA5	; 165
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	de 01       	movw	r26, r28
    21c6:	ab 5a       	subi	r26, 0xAB	; 171
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 5a       	subi	r30, 0xA7	; 167
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	8d 93       	st	X+, r24
    21d6:	9c 93       	st	X, r25
    21d8:	fe 01       	movw	r30, r28
    21da:	eb 5a       	subi	r30, 0xAB	; 171
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_displayCharacter+0x184>
    21e6:	fe 01       	movw	r30, r28
    21e8:	eb 5a       	subi	r30, 0xAB	; 171
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    21fa:	fe 01       	movw	r30, r28
    21fc:	ef 5a       	subi	r30, 0xAF	; 175
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 e8       	ldi	r26, 0x80	; 128
    2206:	bf e3       	ldi	r27, 0x3F	; 63
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	8e 01       	movw	r16, r28
    2212:	03 5b       	subi	r16, 0xB3	; 179
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	ef 5a       	subi	r30, 0xAF	; 175
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a e7       	ldi	r20, 0x7A	; 122
    222a:	55 e4       	ldi	r21, 0x45	; 69
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223e:	fe 01       	movw	r30, r28
    2240:	e3 5b       	subi	r30, 0xB3	; 179
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	44 f4       	brge	.+16     	; 0x226c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    225c:	fe 01       	movw	r30, r28
    225e:	e5 5b       	subi	r30, 0xB5	; 181
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	64 c0       	rjmp	.+200    	; 0x2334 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    226c:	fe 01       	movw	r30, r28
    226e:	e3 5b       	subi	r30, 0xB3	; 179
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <LCD_displayCharacter+0x22e>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5a       	subi	r30, 0xAF	; 175
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8e 01       	movw	r16, r28
    22ac:	05 5b       	subi	r16, 0xB5	; 181
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <LCD_displayCharacter+0x2a4>
    22c4:	fe 01       	movw	r30, r28
    22c6:	e7 5b       	subi	r30, 0xB7	; 183
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 e9       	ldi	r24, 0x90	; 144
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5b       	subi	r30, 0xB7	; 183
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_displayCharacter+0x27e>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e7 5b       	subi	r30, 0xB7	; 183
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	de 01       	movw	r26, r28
    22ec:	a5 5b       	subi	r26, 0xB5	; 181
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e5 5b       	subi	r30, 0xB5	; 181
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	fe 01       	movw	r30, r28
    2304:	e5 5b       	subi	r30, 0xB5	; 181
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f6       	brne	.-76     	; 0x22c4 <LCD_displayCharacter+0x266>
    2310:	27 c0       	rjmp	.+78     	; 0x2360 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	05 5b       	subi	r16, 0xB5	; 181
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e3 5b       	subi	r30, 0xB3	; 179
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	de 01       	movw	r26, r28
    2336:	a9 5b       	subi	r26, 0xB9	; 185
    2338:	bf 4f       	sbci	r27, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e5 5b       	subi	r30, 0xB5	; 181
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8d 93       	st	X+, r24
    2346:	9c 93       	st	X, r25
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5b       	subi	r30, 0xB9	; 185
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x2f4>
    2356:	fe 01       	movw	r30, r28
    2358:	e9 5b       	subi	r30, 0xB9	; 185
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2360:	fe 01       	movw	r30, r28
    2362:	ed 59       	subi	r30, 0x9D	; 157
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	80 71       	andi	r24, 0x10	; 16
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	95 95       	asr	r25
    2372:	87 95       	ror	r24
    2374:	95 95       	asr	r25
    2376:	87 95       	ror	r24
    2378:	95 95       	asr	r25
    237a:	87 95       	ror	r24
    237c:	95 95       	asr	r25
    237e:	87 95       	ror	r24
    2380:	98 2f       	mov	r25, r24
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	63 e0       	ldi	r22, 0x03	; 3
    2386:	49 2f       	mov	r20, r25
    2388:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    238c:	fe 01       	movw	r30, r28
    238e:	ed 59       	subi	r30, 0x9D	; 157
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	80 72       	andi	r24, 0x20	; 32
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	95 95       	asr	r25
    239e:	87 95       	ror	r24
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	95 95       	asr	r25
    23a6:	87 95       	ror	r24
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	98 2f       	mov	r25, r24
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 59       	subi	r30, 0x9D	; 157
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	80 74       	andi	r24, 0x40	; 64
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	08 2e       	mov	r0, r24
    23ce:	89 2f       	mov	r24, r25
    23d0:	00 0c       	add	r0, r0
    23d2:	88 1f       	adc	r24, r24
    23d4:	99 0b       	sbc	r25, r25
    23d6:	00 0c       	add	r0, r0
    23d8:	88 1f       	adc	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	98 2f       	mov	r25, r24
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	65 e0       	ldi	r22, 0x05	; 5
    23e2:	49 2f       	mov	r20, r25
    23e4:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	98 2f       	mov	r25, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	99 27       	eor	r25, r25
    23f6:	99 1f       	adc	r25, r25
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	66 e0       	ldi	r22, 0x06	; 6
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    2402:	fe 01       	movw	r30, r28
    2404:	ed 5b       	subi	r30, 0xBD	; 189
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	80 83       	st	Z, r24
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	a2 83       	std	Z+2, r26	; 0x02
    2416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	8e 01       	movw	r16, r28
    241a:	01 5c       	subi	r16, 0xC1	; 193
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	ed 5b       	subi	r30, 0xBD	; 189
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	55 e4       	ldi	r21, 0x45	; 69
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2446:	fe 01       	movw	r30, r28
    2448:	ff 96       	adiw	r30, 0x3f	; 63
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9e af       	std	Y+62, r25	; 0x3e
    2468:	8d af       	std	Y+61, r24	; 0x3d
    246a:	46 c0       	rjmp	.+140    	; 0x24f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    246c:	fe 01       	movw	r30, r28
    246e:	ff 96       	adiw	r30, 0x3f	; 63
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	64 f5       	brge	.+88     	; 0x24e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LCD_displayCharacter+0x478>
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	9c af       	std	Y+60, r25	; 0x3c
    24be:	8b af       	std	Y+59, r24	; 0x3b
    24c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_displayCharacter+0x466>
    24c8:	9c af       	std	Y+60, r25	; 0x3c
    24ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e af       	std	Y+62, r25	; 0x3e
    24d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LCD_displayCharacter+0x45a>
    24de:	16 c0       	rjmp	.+44     	; 0x250c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	fe 01       	movw	r30, r28
    24e2:	ff 96       	adiw	r30, 0x3f	; 63
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e af       	std	Y+62, r25	; 0x3e
    24f6:	8d af       	std	Y+61, r24	; 0x3d
    24f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fc:	9a af       	std	Y+58, r25	; 0x3a
    24fe:	89 af       	std	Y+57, r24	; 0x39
    2500:	89 ad       	ldd	r24, Y+57	; 0x39
    2502:	9a ad       	ldd	r25, Y+58	; 0x3a
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_displayCharacter+0x4a6>
    2508:	9a af       	std	Y+58, r25	; 0x3a
    250a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8d ab       	std	Y+53, r24	; 0x35
    2520:	9e ab       	std	Y+54, r25	; 0x36
    2522:	af ab       	std	Y+55, r26	; 0x37
    2524:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	55 e4       	ldi	r21, 0x45	; 69
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	89 ab       	std	Y+49, r24	; 0x31
    2540:	9a ab       	std	Y+50, r25	; 0x32
    2542:	ab ab       	std	Y+51, r26	; 0x33
    2544:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2546:	69 a9       	ldd	r22, Y+49	; 0x31
    2548:	7a a9       	ldd	r23, Y+50	; 0x32
    254a:	8b a9       	ldd	r24, Y+51	; 0x33
    254c:	9c a9       	ldd	r25, Y+52	; 0x34
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	98 ab       	std	Y+48, r25	; 0x30
    2564:	8f a7       	std	Y+47, r24	; 0x2f
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2568:	69 a9       	ldd	r22, Y+49	; 0x31
    256a:	7a a9       	ldd	r23, Y+50	; 0x32
    256c:	8b a9       	ldd	r24, Y+51	; 0x33
    256e:	9c a9       	ldd	r25, Y+52	; 0x34
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6d a9       	ldd	r22, Y+53	; 0x35
    2582:	7e a9       	ldd	r23, Y+54	; 0x36
    2584:	8f a9       	ldd	r24, Y+55	; 0x37
    2586:	98 ad       	ldd	r25, Y+56	; 0x38
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	98 ab       	std	Y+48, r25	; 0x30
    25a6:	8f a7       	std	Y+47, r24	; 0x2f
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_displayCharacter+0x56a>
    25aa:	80 e9       	ldi	r24, 0x90	; 144
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	9e a7       	std	Y+46, r25	; 0x2e
    25b0:	8d a7       	std	Y+45, r24	; 0x2d
    25b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_displayCharacter+0x558>
    25ba:	9e a7       	std	Y+46, r25	; 0x2e
    25bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c0:	98 a9       	ldd	r25, Y+48	; 0x30
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_displayCharacter+0x54c>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	69 a9       	ldd	r22, Y+49	; 0x31
    25d4:	7a a9       	ldd	r23, Y+50	; 0x32
    25d6:	8b a9       	ldd	r24, Y+51	; 0x33
    25d8:	9c a9       	ldd	r25, Y+52	; 0x34
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	9c a7       	std	Y+44, r25	; 0x2c
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_displayCharacter+0x594>
    25f6:	9c a7       	std	Y+44, r25	; 0x2c
    25f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8f a3       	std	Y+39, r24	; 0x27
    260e:	98 a7       	std	Y+40, r25	; 0x28
    2610:	a9 a7       	std	Y+41, r26	; 0x29
    2612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	55 e4       	ldi	r21, 0x45	; 69
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8b a3       	std	Y+35, r24	; 0x23
    262e:	9c a3       	std	Y+36, r25	; 0x24
    2630:	ad a3       	std	Y+37, r26	; 0x25
    2632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2634:	6b a1       	ldd	r22, Y+35	; 0x23
    2636:	7c a1       	ldd	r23, Y+36	; 0x24
    2638:	8d a1       	ldd	r24, Y+37	; 0x25
    263a:	9e a1       	ldd	r25, Y+38	; 0x26
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9a a3       	std	Y+34, r25	; 0x22
    2652:	89 a3       	std	Y+33, r24	; 0x21
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2656:	6b a1       	ldd	r22, Y+35	; 0x23
    2658:	7c a1       	ldd	r23, Y+36	; 0x24
    265a:	8d a1       	ldd	r24, Y+37	; 0x25
    265c:	9e a1       	ldd	r25, Y+38	; 0x26
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6f a1       	ldd	r22, Y+39	; 0x27
    2670:	78 a5       	ldd	r23, Y+40	; 0x28
    2672:	89 a5       	ldd	r24, Y+41	; 0x29
    2674:	9a a5       	ldd	r25, Y+42	; 0x2a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9a a3       	std	Y+34, r25	; 0x22
    2694:	89 a3       	std	Y+33, r24	; 0x21
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_displayCharacter+0x658>
    2698:	80 e9       	ldi	r24, 0x90	; 144
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
    26a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a2:	98 a1       	ldd	r25, Y+32	; 0x20
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_displayCharacter+0x646>
    26a8:	98 a3       	std	Y+32, r25	; 0x20
    26aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	89 a1       	ldd	r24, Y+33	; 0x21
    26ae:	9a a1       	ldd	r25, Y+34	; 0x22
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	89 a1       	ldd	r24, Y+33	; 0x21
    26b8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_displayCharacter+0x63a>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_displayCharacter+0x682>
    26e4:	9e 8f       	std	Y+30, r25	; 0x1e
    26e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 59       	subi	r30, 0x9D	; 157
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	98 2f       	mov	r25, r24
    26f2:	91 70       	andi	r25, 0x01	; 1
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	63 e0       	ldi	r22, 0x03	; 3
    26f8:	49 2f       	mov	r20, r25
    26fa:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 59       	subi	r30, 0x9D	; 157
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	82 70       	andi	r24, 0x02	; 2
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	95 95       	asr	r25
    2710:	87 95       	ror	r24
    2712:	98 2f       	mov	r25, r24
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	64 e0       	ldi	r22, 0x04	; 4
    2718:	49 2f       	mov	r20, r25
    271a:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    271e:	fe 01       	movw	r30, r28
    2720:	ed 59       	subi	r30, 0x9D	; 157
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	84 70       	andi	r24, 0x04	; 4
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	95 95       	asr	r25
    2730:	87 95       	ror	r24
    2732:	95 95       	asr	r25
    2734:	87 95       	ror	r24
    2736:	98 2f       	mov	r25, r24
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	65 e0       	ldi	r22, 0x05	; 5
    273c:	49 2f       	mov	r20, r25
    273e:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2742:	fe 01       	movw	r30, r28
    2744:	ed 59       	subi	r30, 0x9D	; 157
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	88 70       	andi	r24, 0x08	; 8
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	98 2f       	mov	r25, r24
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	66 e0       	ldi	r22, 0x06	; 6
    2764:	49 2f       	mov	r20, r25
    2766:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e8       	ldi	r26, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	89 8f       	std	Y+25, r24	; 0x19
    2774:	9a 8f       	std	Y+26, r25	; 0x1a
    2776:	ab 8f       	std	Y+27, r26	; 0x1b
    2778:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	55 e4       	ldi	r21, 0x45	; 69
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8d 8b       	std	Y+21, r24	; 0x15
    2794:	9e 8b       	std	Y+22, r25	; 0x16
    2796:	af 8b       	std	Y+23, r26	; 0x17
    2798:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	69 8d       	ldd	r22, Y+25	; 0x19
    27d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_displayCharacter+0x7be>
    27fe:	80 e9       	ldi	r24, 0x90	; 144
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	9a 8b       	std	Y+18, r25	; 0x12
    2804:	89 8b       	std	Y+17, r24	; 0x11
    2806:	89 89       	ldd	r24, Y+17	; 0x11
    2808:	9a 89       	ldd	r25, Y+18	; 0x12
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_displayCharacter+0x7ac>
    280e:	9a 8b       	std	Y+18, r25	; 0x12
    2810:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8b 89       	ldd	r24, Y+19	; 0x13
    2814:	9c 89       	ldd	r25, Y+20	; 0x14
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8b 89       	ldd	r24, Y+19	; 0x13
    281e:	9c 89       	ldd	r25, Y+20	; 0x14
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_displayCharacter+0x7a0>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6d 89       	ldd	r22, Y+21	; 0x15
    2828:	7e 89       	ldd	r23, Y+22	; 0x16
    282a:	8f 89       	ldd	r24, Y+23	; 0x17
    282c:	98 8d       	ldd	r25, Y+24	; 0x18
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	98 8b       	std	Y+16, r25	; 0x10
    2840:	8f 87       	std	Y+15, r24	; 0x0f
    2842:	8f 85       	ldd	r24, Y+15	; 0x0f
    2844:	98 89       	ldd	r25, Y+16	; 0x10
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x7e8>
    284a:	98 8b       	std	Y+16, r25	; 0x10
    284c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 12 07 	call	0xe24	; 0xe24 <GPIO_writePin>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_displayCharacter+0x8ac>
    28ec:	80 e9       	ldi	r24, 0x90	; 144
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_displayCharacter+0x89a>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_displayCharacter+0x88e>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_displayCharacter+0x8d6>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    293c:	cd 59       	subi	r28, 0x9D	; 157
    293e:	df 4f       	sbci	r29, 0xFF	; 255
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <LCD_displayString+0x6>
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	9b 83       	std	Y+3, r25	; 0x03
    2962:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2964:	19 82       	std	Y+1, r1	; 0x01
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	fc 01       	movw	r30, r24
    2974:	e2 0f       	add	r30, r18
    2976:	f3 1f       	adc	r31, r19
    2978:	80 81       	ld	r24, Z
    297a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
		i++;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	9b 81       	ldd	r25, Y+3	; 0x03
    298e:	fc 01       	movw	r30, r24
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	80 81       	ld	r24, Z
    2996:	88 23       	and	r24, r24
    2998:	39 f7       	brne	.-50     	; 0x2968 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <LCD_moveCursor+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <LCD_moveCursor+0x8>
    29ae:	0f 92       	push	r0
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	8a 83       	std	Y+2, r24	; 0x02
    29b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	3d 83       	std	Y+5, r19	; 0x05
    29c0:	2c 83       	std	Y+4, r18	; 0x04
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	9d 81       	ldd	r25, Y+5	; 0x05
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	91 05       	cpc	r25, r1
    29ca:	c1 f0       	breq	.+48     	; 0x29fc <LCD_moveCursor+0x56>
    29cc:	2c 81       	ldd	r18, Y+4	; 0x04
    29ce:	3d 81       	ldd	r19, Y+5	; 0x05
    29d0:	22 30       	cpi	r18, 0x02	; 2
    29d2:	31 05       	cpc	r19, r1
    29d4:	2c f4       	brge	.+10     	; 0x29e0 <LCD_moveCursor+0x3a>
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	9d 81       	ldd	r25, Y+5	; 0x05
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	61 f0       	breq	.+24     	; 0x29f6 <LCD_moveCursor+0x50>
    29de:	19 c0       	rjmp	.+50     	; 0x2a12 <LCD_moveCursor+0x6c>
    29e0:	2c 81       	ldd	r18, Y+4	; 0x04
    29e2:	3d 81       	ldd	r19, Y+5	; 0x05
    29e4:	22 30       	cpi	r18, 0x02	; 2
    29e6:	31 05       	cpc	r19, r1
    29e8:	69 f0       	breq	.+26     	; 0x2a04 <LCD_moveCursor+0x5e>
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	83 30       	cpi	r24, 0x03	; 3
    29f0:	91 05       	cpc	r25, r1
    29f2:	61 f0       	breq	.+24     	; 0x2a0c <LCD_moveCursor+0x66>
    29f4:	0e c0       	rjmp	.+28     	; 0x2a12 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	0b c0       	rjmp	.+22     	; 0x2a12 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	80 5c       	subi	r24, 0xC0	; 192
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	80 5f       	subi	r24, 0xF0	; 240
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	80 5b       	subi	r24, 0xB0	; 176
    2a10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <LCD_displayStringRowColumn+0x6>
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <LCD_displayStringRowColumn+0x8>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	6a 83       	std	Y+2, r22	; 0x02
    2a3a:	5c 83       	std	Y+4, r21	; 0x04
    2a3c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	6a 81       	ldd	r22, Y+2	; 0x02
    2a42:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	62 97       	sbiw	r28, 0x12	; 18
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	9a 8b       	std	Y+18, r25	; 0x12
    2a72:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	9a 89       	ldd	r25, Y+18	; 0x12
    2a78:	9e 01       	movw	r18, r28
    2a7a:	2f 5f       	subi	r18, 0xFF	; 255
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	b9 01       	movw	r22, r18
    2a80:	4a e0       	ldi	r20, 0x0A	; 10
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a88:	ce 01       	movw	r24, r28
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
}
    2a90:	62 96       	adiw	r28, 0x12	; 18
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
}
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <insertAtLast>:
struct node *current = NULL;
struct node *prevs = NULL;

//Create Linked List
void insertAtLast(int data)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <insertAtLast+0x6>
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <insertAtLast+0x8>
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
	// Allocate memory for new node
	struct node *link = (struct node*) malloc(sizeof(struct node));
    2ac6:	86 e0       	ldi	r24, 0x06	; 6
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <malloc>
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01

	// insert the data to the new node and make the next point to null
	link->data = data;
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
	link->next = NULL;
    2ade:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae2:	13 82       	std	Z+3, r1	; 0x03
    2ae4:	12 82       	std	Z+2, r1	; 0x02

	// If head is empty, create new list
	if(head==NULL)
    2ae6:	80 91 7a 00 	lds	r24, 0x007A
    2aea:	90 91 7b 00 	lds	r25, 0x007B
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	39 f4       	brne	.+14     	; 0x2b00 <insertAtLast+0x4a>
	{
		head = link;
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	90 93 7b 00 	sts	0x007B, r25
    2afa:	80 93 7a 00 	sts	0x007A, r24
    2afe:	2b c0       	rjmp	.+86     	; 0x2b56 <insertAtLast+0xa0>
		return;
	}

	current = head;
    2b00:	80 91 7a 00 	lds	r24, 0x007A
    2b04:	90 91 7b 00 	lds	r25, 0x007B
    2b08:	90 93 7d 00 	sts	0x007D, r25
    2b0c:	80 93 7c 00 	sts	0x007C, r24
    2b10:	0a c0       	rjmp	.+20     	; 0x2b26 <insertAtLast+0x70>

	// loop until reach the last node in the old list
	while(current->next != NULL)
	{
		current = current->next;
    2b12:	e0 91 7c 00 	lds	r30, 0x007C
    2b16:	f0 91 7d 00 	lds	r31, 0x007D
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	90 93 7d 00 	sts	0x007D, r25
    2b22:	80 93 7c 00 	sts	0x007C, r24
	}

	current = head;

	// loop until reach the last node in the old list
	while(current->next != NULL)
    2b26:	e0 91 7c 00 	lds	r30, 0x007C
    2b2a:	f0 91 7d 00 	lds	r31, 0x007D
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	71 f7       	brne	.-36     	; 0x2b12 <insertAtLast+0x5c>
	{
		current = current->next;
	}

	// Make the last node in the old list point to new node
	link->prev = current;
    2b36:	80 91 7c 00 	lds	r24, 0x007C
    2b3a:	90 91 7d 00 	lds	r25, 0x007D
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	95 83       	std	Z+5, r25	; 0x05
    2b44:	84 83       	std	Z+4, r24	; 0x04
	current->next = link;
    2b46:	e0 91 7c 00 	lds	r30, 0x007C
    2b4a:	f0 91 7d 00 	lds	r31, 0x007D
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	93 83       	std	Z+3, r25	; 0x03
    2b54:	82 83       	std	Z+2, r24	; 0x02
}
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <printList>:


void printList(void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <printList+0x6>
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <printList+0x8>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
	struct node *ptr = head;
    2b70:	80 91 7a 00 	lds	r24, 0x007A
    2b74:	90 91 7b 00 	lds	r25, 0x007B
    2b78:	9c 83       	std	Y+4, r25	; 0x04
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
	int my_Data;

	LCD_displayStringRowColumn(1,0," ");
    2b7c:	20 e6       	ldi	r18, 0x60	; 96
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	a9 01       	movw	r20, r18
    2b86:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_displayStringRowColumn>
    2b8a:	2b c0       	rjmp	.+86     	; 0x2be2 <printList+0x7e>
	//start looping from the head until the last node
	while(ptr != NULL)
	{
		my_Data = ptr->data;
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
		if ((my_Data=='+') || (my_Data=='-') || (my_Data=='%') || (my_Data=='*')){
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	8b 32       	cpi	r24, 0x2B	; 43
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	79 f0       	breq	.+30     	; 0x2bc0 <printList+0x5c>
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	8d 32       	cpi	r24, 0x2D	; 45
    2ba8:	91 05       	cpc	r25, r1
    2baa:	51 f0       	breq	.+20     	; 0x2bc0 <printList+0x5c>
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	85 32       	cpi	r24, 0x25	; 37
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <printList+0x5c>
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	8a 32       	cpi	r24, 0x2A	; 42
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	21 f4       	brne	.+8      	; 0x2bc8 <printList+0x64>
			LCD_displayCharacter(my_Data);
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <printList+0x6c>
		}
		else
		{
			LCD_intgerToString(my_Data);
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_intgerToString>
		}
		LCD_displayCharacter('$');
    2bd0:	84 e2       	ldi	r24, 0x24	; 36
    2bd2:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
		ptr = ptr->next;
    2bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
	struct node *ptr = head;
	int my_Data;

	LCD_displayStringRowColumn(1,0," ");
	//start looping from the head until the last node
	while(ptr != NULL)
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	89 f6       	brne	.-94     	; 0x2b8c <printList+0x28>
		}
		LCD_displayCharacter('$');
		ptr = ptr->next;
	}

}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <removeNodeFromTheList>:


void removeNodeFromTheList(int data)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <removeNodeFromTheList+0x6>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <removeNodeFromTheList+0x8>
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <removeNodeFromTheList+0xa>
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
	int pos = 0;
    2c0a:	1c 82       	std	Y+4, r1	; 0x04
    2c0c:	1b 82       	std	Y+3, r1	; 0x03
	struct node * delete_node = NULL;
    2c0e:	1a 82       	std	Y+2, r1	; 0x02
    2c10:	19 82       	std	Y+1, r1	; 0x01

	//check if the linked list is empty
	if(head==NULL)
    2c12:	80 91 7a 00 	lds	r24, 0x007A
    2c16:	90 91 7b 00 	lds	r25, 0x007B
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <removeNodeFromTheList+0x28>
    2c1e:	87 c0       	rjmp	.+270    	; 0x2d2e <removeNodeFromTheList+0x136>
	{
		return;
	}

	//check the first node in the linked list
	if(head->data == data)
    2c20:	e0 91 7a 00 	lds	r30, 0x007A
    2c24:	f0 91 7b 00 	lds	r31, 0x007B
    2c28:	20 81       	ld	r18, Z
    2c2a:	31 81       	ldd	r19, Z+1	; 0x01
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	28 17       	cp	r18, r24
    2c32:	39 07       	cpc	r19, r25
    2c34:	a9 f4       	brne	.+42     	; 0x2c60 <removeNodeFromTheList+0x68>
	{
		delete_node = head;
    2c36:	80 91 7a 00 	lds	r24, 0x007A
    2c3a:	90 91 7b 00 	lds	r25, 0x007B
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
		// move head to next node
		head = head->next;
    2c42:	e0 91 7a 00 	lds	r30, 0x007A
    2c46:	f0 91 7b 00 	lds	r31, 0x007B
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	90 93 7b 00 	sts	0x007B, r25
    2c52:	80 93 7a 00 	sts	0x007A, r24
		free(delete_node);
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <free>
    2c5e:	67 c0       	rjmp	.+206    	; 0x2d2e <removeNodeFromTheList+0x136>
		return;
	}

	//check the rest of nodes in the linked list
	pos++;
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
	current = head->next;
    2c6a:	e0 91 7a 00 	lds	r30, 0x007A
    2c6e:	f0 91 7b 00 	lds	r31, 0x007B
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	90 93 7d 00 	sts	0x007D, r25
    2c7a:	80 93 7c 00 	sts	0x007C, r24
	prevs = head;
    2c7e:	80 91 7a 00 	lds	r24, 0x007A
    2c82:	90 91 7b 00 	lds	r25, 0x007B
    2c86:	90 93 7f 00 	sts	0x007F, r25
    2c8a:	80 93 7e 00 	sts	0x007E, r24
    2c8e:	48 c0       	rjmp	.+144    	; 0x2d20 <removeNodeFromTheList+0x128>
	while(current != NULL)
	{
		if(current->data == data)
    2c90:	e0 91 7c 00 	lds	r30, 0x007C
    2c94:	f0 91 7d 00 	lds	r31, 0x007D
    2c98:	20 81       	ld	r18, Z
    2c9a:	31 81       	ldd	r19, Z+1	; 0x01
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	28 17       	cp	r18, r24
    2ca2:	39 07       	cpc	r19, r25
    2ca4:	31 f5       	brne	.+76     	; 0x2cf2 <removeNodeFromTheList+0xfa>
		{
			//element found
			delete_node = current;
    2ca6:	80 91 7c 00 	lds	r24, 0x007C
    2caa:	90 91 7d 00 	lds	r25, 0x007D
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
			prevs->next = current->next;
    2cb2:	a0 91 7e 00 	lds	r26, 0x007E
    2cb6:	b0 91 7f 00 	lds	r27, 0x007F
    2cba:	e0 91 7c 00 	lds	r30, 0x007C
    2cbe:	f0 91 7d 00 	lds	r31, 0x007D
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	13 96       	adiw	r26, 0x03	; 3
    2cc8:	9c 93       	st	X, r25
    2cca:	8e 93       	st	-X, r24
    2ccc:	12 97       	sbiw	r26, 0x02	; 2
			current->next->prev = prevs;
    2cce:	e0 91 7c 00 	lds	r30, 0x007C
    2cd2:	f0 91 7d 00 	lds	r31, 0x007D
    2cd6:	02 80       	ldd	r0, Z+2	; 0x02
    2cd8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cda:	e0 2d       	mov	r30, r0
    2cdc:	80 91 7e 00 	lds	r24, 0x007E
    2ce0:	90 91 7f 00 	lds	r25, 0x007F
    2ce4:	95 83       	std	Z+5, r25	; 0x05
    2ce6:	84 83       	std	Z+4, r24	; 0x04
			free(delete_node);
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	0e 94 a1 1a 	call	0x3542	; 0x3542 <free>
    2cf0:	1e c0       	rjmp	.+60     	; 0x2d2e <removeNodeFromTheList+0x136>
			return;
		}
		prevs = current;
    2cf2:	80 91 7c 00 	lds	r24, 0x007C
    2cf6:	90 91 7d 00 	lds	r25, 0x007D
    2cfa:	90 93 7f 00 	sts	0x007F, r25
    2cfe:	80 93 7e 00 	sts	0x007E, r24
		current = current->next;
    2d02:	e0 91 7c 00 	lds	r30, 0x007C
    2d06:	f0 91 7d 00 	lds	r31, 0x007D
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	90 93 7d 00 	sts	0x007D, r25
    2d12:	80 93 7c 00 	sts	0x007C, r24
		pos++;
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03

	//check the rest of nodes in the linked list
	pos++;
	current = head->next;
	prevs = head;
	while(current != NULL)
    2d20:	80 91 7c 00 	lds	r24, 0x007C
    2d24:	90 91 7d 00 	lds	r25, 0x007D
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <removeNodeFromTheList+0x136>
    2d2c:	b1 cf       	rjmp	.-158    	; 0x2c90 <removeNodeFromTheList+0x98>
		current = current->next;
		pos++;
	}


}
    2d2e:	26 96       	adiw	r28, 0x06	; 6
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <calc1>:

void calc1 (void)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <calc1+0x6>
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <calc1+0x8>
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62

	struct node *ptr = head;
    2d4c:	80 91 7a 00 	lds	r24, 0x007A
    2d50:	90 91 7b 00 	lds	r25, 0x007B
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	77 c0       	rjmp	.+238    	; 0x2e48 <calc1+0x108>
	//LCD_displayStringRowColumn(1,0,"");

	//start looping from the head until the last node
	while(ptr->next != NULL)
	{
		if ((ptr->data == '%') || (ptr->data == '*'))
    2d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	85 32       	cpi	r24, 0x25	; 37
    2d64:	91 05       	cpc	r25, r1
    2d66:	41 f0       	breq	.+16     	; 0x2d78 <calc1+0x38>
    2d68:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	8a 32       	cpi	r24, 0x2A	; 42
    2d72:	91 05       	cpc	r25, r1
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <calc1+0x38>
    2d76:	5c c0       	rjmp	.+184    	; 0x2e30 <calc1+0xf0>
		{
			if (ptr->data == '%')
    2d78:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	85 32       	cpi	r24, 0x25	; 37
    2d82:	91 05       	cpc	r25, r1
    2d84:	b9 f4       	brne	.+46     	; 0x2db4 <calc1+0x74>
			{
				result = operation(division,ptr->prev->data,ptr->next->data);
    2d86:	eb 81       	ldd	r30, Y+3	; 0x03
    2d88:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8a:	04 80       	ldd	r0, Z+4	; 0x04
    2d8c:	f5 81       	ldd	r31, Z+5	; 0x05
    2d8e:	e0 2d       	mov	r30, r0
    2d90:	40 81       	ld	r20, Z
    2d92:	51 81       	ldd	r21, Z+1	; 0x01
    2d94:	eb 81       	ldd	r30, Y+3	; 0x03
    2d96:	fc 81       	ldd	r31, Y+4	; 0x04
    2d98:	02 80       	ldd	r0, Z+2	; 0x02
    2d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d9c:	e0 2d       	mov	r30, r0
    2d9e:	20 81       	ld	r18, Z
    2da0:	31 81       	ldd	r19, Z+1	; 0x01
    2da2:	80 ef       	ldi	r24, 0xF0	; 240
    2da4:	95 e0       	ldi	r25, 0x05	; 5
    2da6:	ba 01       	movw	r22, r20
    2da8:	a9 01       	movw	r20, r18
    2daa:	0e 94 09 06 	call	0xc12	; 0xc12 <operation>
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	1d c0       	rjmp	.+58     	; 0x2dee <calc1+0xae>

			}
			else if (ptr->data == '*')
    2db4:	eb 81       	ldd	r30, Y+3	; 0x03
    2db6:	fc 81       	ldd	r31, Y+4	; 0x04
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	8a 32       	cpi	r24, 0x2A	; 42
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	b1 f4       	brne	.+44     	; 0x2dee <calc1+0xae>
			{
				result = operation(mul,ptr->next->data,ptr->prev->data);
    2dc2:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc4:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc6:	02 80       	ldd	r0, Z+2	; 0x02
    2dc8:	f3 81       	ldd	r31, Z+3	; 0x03
    2dca:	e0 2d       	mov	r30, r0
    2dcc:	40 81       	ld	r20, Z
    2dce:	51 81       	ldd	r21, Z+1	; 0x01
    2dd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd4:	04 80       	ldd	r0, Z+4	; 0x04
    2dd6:	f5 81       	ldd	r31, Z+5	; 0x05
    2dd8:	e0 2d       	mov	r30, r0
    2dda:	20 81       	ld	r18, Z
    2ddc:	31 81       	ldd	r19, Z+1	; 0x01
    2dde:	83 ed       	ldi	r24, 0xD3	; 211
    2de0:	95 e0       	ldi	r25, 0x05	; 5
    2de2:	ba 01       	movw	r22, r20
    2de4:	a9 01       	movw	r20, r18
    2de6:	0e 94 09 06 	call	0xc12	; 0xc12 <operation>
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01

			}
			//LCD_intgerToString(ptr->prev->data);
			//LCD_displayCharacter('#');

			ptr->prev->data=result;
    2dee:	eb 81       	ldd	r30, Y+3	; 0x03
    2df0:	fc 81       	ldd	r31, Y+4	; 0x04
    2df2:	04 80       	ldd	r0, Z+4	; 0x04
    2df4:	f5 81       	ldd	r31, Z+5	; 0x05
    2df6:	e0 2d       	mov	r30, r0
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
			removeNodeFromTheList(ptr->next->data);
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	02 80       	ldd	r0, Z+2	; 0x02
    2e06:	f3 81       	ldd	r31, Z+3	; 0x03
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <removeNodeFromTheList>
			ptr = ptr->prev;
    2e12:	eb 81       	ldd	r30, Y+3	; 0x03
    2e14:	fc 81       	ldd	r31, Y+4	; 0x04
    2e16:	84 81       	ldd	r24, Z+4	; 0x04
    2e18:	95 81       	ldd	r25, Z+5	; 0x05
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
			removeNodeFromTheList(ptr->next->data);
    2e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e20:	fc 81       	ldd	r31, Y+4	; 0x04
    2e22:	02 80       	ldd	r0, Z+2	; 0x02
    2e24:	f3 81       	ldd	r31, Z+3	; 0x03
    2e26:	e0 2d       	mov	r30, r0
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <removeNodeFromTheList>
		}

		if (ptr->next != NULL ){
    2e30:	eb 81       	ldd	r30, Y+3	; 0x03
    2e32:	fc 81       	ldd	r31, Y+4	; 0x04
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	31 f0       	breq	.+12     	; 0x2e48 <calc1+0x108>
			ptr = ptr->next;
    2e3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	9c 83       	std	Y+4, r25	; 0x04
    2e46:	8b 83       	std	Y+3, r24	; 0x03
	struct node *ptr = head;
	int result;
	//LCD_displayStringRowColumn(1,0,"");

	//start looping from the head until the last node
	while(ptr->next != NULL)
    2e48:	eb 81       	ldd	r30, Y+3	; 0x03
    2e4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <calc1+0x116>
    2e54:	82 cf       	rjmp	.-252    	; 0x2d5a <calc1+0x1a>
			ptr = ptr->next;
		}
	}


}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <calc2>:

void calc2 (void)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	62 97       	sbiw	r28, 0x12	; 18
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61

	struct node *ptr = head;
    2e78:	80 91 7a 00 	lds	r24, 0x007A
    2e7c:	90 91 7b 00 	lds	r25, 0x007B
    2e80:	9a 8b       	std	Y+18, r25	; 0x12
    2e82:	89 8b       	std	Y+17, r24	; 0x11
    2e84:	77 c0       	rjmp	.+238    	; 0x2f74 <calc2+0x110>
	int result;

	//start looping from the head until the last node
	while(ptr->next != NULL)
	{
		if ((ptr->data == '+') || (ptr->data == '-'))
    2e86:	e9 89       	ldd	r30, Y+17	; 0x11
    2e88:	fa 89       	ldd	r31, Y+18	; 0x12
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	8b 32       	cpi	r24, 0x2B	; 43
    2e90:	91 05       	cpc	r25, r1
    2e92:	41 f0       	breq	.+16     	; 0x2ea4 <calc2+0x40>
    2e94:	e9 89       	ldd	r30, Y+17	; 0x11
    2e96:	fa 89       	ldd	r31, Y+18	; 0x12
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	8d 32       	cpi	r24, 0x2D	; 45
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <calc2+0x40>
    2ea2:	5c c0       	rjmp	.+184    	; 0x2f5c <calc2+0xf8>
		{
			if (ptr->data == '+')
    2ea4:	e9 89       	ldd	r30, Y+17	; 0x11
    2ea6:	fa 89       	ldd	r31, Y+18	; 0x12
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	8b 32       	cpi	r24, 0x2B	; 43
    2eae:	91 05       	cpc	r25, r1
    2eb0:	b9 f4       	brne	.+46     	; 0x2ee0 <calc2+0x7c>
			{
				result = operation(add,ptr->next->data,ptr->prev->data);
    2eb2:	e9 89       	ldd	r30, Y+17	; 0x11
    2eb4:	fa 89       	ldd	r31, Y+18	; 0x12
    2eb6:	02 80       	ldd	r0, Z+2	; 0x02
    2eb8:	f3 81       	ldd	r31, Z+3	; 0x03
    2eba:	e0 2d       	mov	r30, r0
    2ebc:	40 81       	ld	r20, Z
    2ebe:	51 81       	ldd	r21, Z+1	; 0x01
    2ec0:	e9 89       	ldd	r30, Y+17	; 0x11
    2ec2:	fa 89       	ldd	r31, Y+18	; 0x12
    2ec4:	04 80       	ldd	r0, Z+4	; 0x04
    2ec6:	f5 81       	ldd	r31, Z+5	; 0x05
    2ec8:	e0 2d       	mov	r30, r0
    2eca:	20 81       	ld	r18, Z
    2ecc:	31 81       	ldd	r19, Z+1	; 0x01
    2ece:	83 ea       	ldi	r24, 0xA3	; 163
    2ed0:	95 e0       	ldi	r25, 0x05	; 5
    2ed2:	ba 01       	movw	r22, r20
    2ed4:	a9 01       	movw	r20, r18
    2ed6:	0e 94 09 06 	call	0xc12	; 0xc12 <operation>
    2eda:	98 8b       	std	Y+16, r25	; 0x10
    2edc:	8f 87       	std	Y+15, r24	; 0x0f
    2ede:	1d c0       	rjmp	.+58     	; 0x2f1a <calc2+0xb6>
			}
			else if (ptr->data == '-')
    2ee0:	e9 89       	ldd	r30, Y+17	; 0x11
    2ee2:	fa 89       	ldd	r31, Y+18	; 0x12
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	8d 32       	cpi	r24, 0x2D	; 45
    2eea:	91 05       	cpc	r25, r1
    2eec:	b1 f4       	brne	.+44     	; 0x2f1a <calc2+0xb6>
			{
				result = operation(sub,ptr->prev->data,ptr->next->data);
    2eee:	e9 89       	ldd	r30, Y+17	; 0x11
    2ef0:	fa 89       	ldd	r31, Y+18	; 0x12
    2ef2:	04 80       	ldd	r0, Z+4	; 0x04
    2ef4:	f5 81       	ldd	r31, Z+5	; 0x05
    2ef6:	e0 2d       	mov	r30, r0
    2ef8:	40 81       	ld	r20, Z
    2efa:	51 81       	ldd	r21, Z+1	; 0x01
    2efc:	e9 89       	ldd	r30, Y+17	; 0x11
    2efe:	fa 89       	ldd	r31, Y+18	; 0x12
    2f00:	02 80       	ldd	r0, Z+2	; 0x02
    2f02:	f3 81       	ldd	r31, Z+3	; 0x03
    2f04:	e0 2d       	mov	r30, r0
    2f06:	20 81       	ld	r18, Z
    2f08:	31 81       	ldd	r19, Z+1	; 0x01
    2f0a:	8a eb       	ldi	r24, 0xBA	; 186
    2f0c:	95 e0       	ldi	r25, 0x05	; 5
    2f0e:	ba 01       	movw	r22, r20
    2f10:	a9 01       	movw	r20, r18
    2f12:	0e 94 09 06 	call	0xc12	; 0xc12 <operation>
    2f16:	98 8b       	std	Y+16, r25	; 0x10
    2f18:	8f 87       	std	Y+15, r24	; 0x0f
			}

			ptr->prev->data=result;
    2f1a:	e9 89       	ldd	r30, Y+17	; 0x11
    2f1c:	fa 89       	ldd	r31, Y+18	; 0x12
    2f1e:	04 80       	ldd	r0, Z+4	; 0x04
    2f20:	f5 81       	ldd	r31, Z+5	; 0x05
    2f22:	e0 2d       	mov	r30, r0
    2f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f26:	98 89       	ldd	r25, Y+16	; 0x10
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
			removeNodeFromTheList(ptr->next->data);
    2f2c:	e9 89       	ldd	r30, Y+17	; 0x11
    2f2e:	fa 89       	ldd	r31, Y+18	; 0x12
    2f30:	02 80       	ldd	r0, Z+2	; 0x02
    2f32:	f3 81       	ldd	r31, Z+3	; 0x03
    2f34:	e0 2d       	mov	r30, r0
    2f36:	80 81       	ld	r24, Z
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <removeNodeFromTheList>
			ptr = ptr->prev;
    2f3e:	e9 89       	ldd	r30, Y+17	; 0x11
    2f40:	fa 89       	ldd	r31, Y+18	; 0x12
    2f42:	84 81       	ldd	r24, Z+4	; 0x04
    2f44:	95 81       	ldd	r25, Z+5	; 0x05
    2f46:	9a 8b       	std	Y+18, r25	; 0x12
    2f48:	89 8b       	std	Y+17, r24	; 0x11
			removeNodeFromTheList(ptr->next->data);
    2f4a:	e9 89       	ldd	r30, Y+17	; 0x11
    2f4c:	fa 89       	ldd	r31, Y+18	; 0x12
    2f4e:	02 80       	ldd	r0, Z+2	; 0x02
    2f50:	f3 81       	ldd	r31, Z+3	; 0x03
    2f52:	e0 2d       	mov	r30, r0
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <removeNodeFromTheList>
		}
		if (ptr->next != NULL ){
    2f5c:	e9 89       	ldd	r30, Y+17	; 0x11
    2f5e:	fa 89       	ldd	r31, Y+18	; 0x12
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	31 f0       	breq	.+12     	; 0x2f74 <calc2+0x110>
			ptr = ptr->next;
    2f68:	e9 89       	ldd	r30, Y+17	; 0x11
    2f6a:	fa 89       	ldd	r31, Y+18	; 0x12
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	9a 8b       	std	Y+18, r25	; 0x12
    2f72:	89 8b       	std	Y+17, r24	; 0x11

	struct node *ptr = head;
	int result;

	//start looping from the head until the last node
	while(ptr->next != NULL)
    2f74:	e9 89       	ldd	r30, Y+17	; 0x11
    2f76:	fa 89       	ldd	r31, Y+18	; 0x12
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <calc2+0x11e>
    2f80:	82 cf       	rjmp	.-252    	; 0x2e86 <calc2+0x22>
		if (ptr->next != NULL ){
			ptr = ptr->next;
		}

	}
	LCD_displayStringRowColumn(1,0,"");
    2f82:	22 e6       	ldi	r18, 0x62	; 98
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	a9 01       	movw	r20, r18
    2f8c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_displayStringRowColumn>
	LCD_displayString("Result= ");
    2f90:	83 e6       	ldi	r24, 0x63	; 99
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
	LCD_intgerToString(head->data);
    2f98:	e0 91 7a 00 	lds	r30, 0x007A
    2f9c:	f0 91 7b 00 	lds	r31, 0x007B
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_intgerToString>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a8 e4       	ldi	r26, 0x48	; 72
    2fae:	b2 e4       	ldi	r27, 0x42	; 66
    2fb0:	8b 87       	std	Y+11, r24	; 0x0b
    2fb2:	9c 87       	std	Y+12, r25	; 0x0c
    2fb4:	ad 87       	std	Y+13, r26	; 0x0d
    2fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	4a e7       	ldi	r20, 0x7A	; 122
    2fc6:	55 e4       	ldi	r21, 0x45	; 69
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	8f 83       	std	Y+7, r24	; 0x07
    2fd2:	98 87       	std	Y+8, r25	; 0x08
    2fd4:	a9 87       	std	Y+9, r26	; 0x09
    2fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fda:	78 85       	ldd	r23, Y+8	; 0x08
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e8       	ldi	r20, 0x80	; 128
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	2c f4       	brge	.+10     	; 0x2ffa <calc2+0x196>
		__ticks = 1;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
    2ff8:	3f c0       	rjmp	.+126    	; 0x3078 <calc2+0x214>
	else if (__tmp > 65535)
    2ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffc:	78 85       	ldd	r23, Y+8	; 0x08
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	9a 85       	ldd	r25, Y+10	; 0x0a
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	3f ef       	ldi	r19, 0xFF	; 255
    3006:	4f e7       	ldi	r20, 0x7F	; 127
    3008:	57 e4       	ldi	r21, 0x47	; 71
    300a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300e:	18 16       	cp	r1, r24
    3010:	4c f5       	brge	.+82     	; 0x3064 <calc2+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e2       	ldi	r20, 0x20	; 32
    3020:	51 e4       	ldi	r21, 0x41	; 65
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
    303a:	0f c0       	rjmp	.+30     	; 0x305a <calc2+0x1f6>
    303c:	80 e9       	ldi	r24, 0x90	; 144
    303e:	91 e0       	ldi	r25, 0x01	; 1
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <calc2+0x1e4>
    304c:	9c 83       	std	Y+4, r25	; 0x04
    304e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	9e 83       	std	Y+6, r25	; 0x06
    3058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305a:	8d 81       	ldd	r24, Y+5	; 0x05
    305c:	9e 81       	ldd	r25, Y+6	; 0x06
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	69 f7       	brne	.-38     	; 0x303c <calc2+0x1d8>
    3062:	14 c0       	rjmp	.+40     	; 0x308c <calc2+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3064:	6f 81       	ldd	r22, Y+7	; 0x07
    3066:	78 85       	ldd	r23, Y+8	; 0x08
    3068:	89 85       	ldd	r24, Y+9	; 0x09
    306a:	9a 85       	ldd	r25, Y+10	; 0x0a
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	9a 81       	ldd	r25, Y+2	; 0x02
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <calc2+0x220>
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	removeNodeFromTheList(head->data);
    308c:	e0 91 7a 00 	lds	r30, 0x007A
    3090:	f0 91 7b 00 	lds	r31, 0x007B
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <removeNodeFromTheList>
	//printList();
}
    309c:	62 96       	adiw	r28, 0x12	; 18
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <main>:
void fillList(uint8 *str);



int main(void)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	60 97       	sbiw	r28, 0x10	; 16
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
	uint8 word[16];
	LCD_init();
    30c2:	0e 94 02 0b 	call	0x1604	; 0x1604 <LCD_init>


	while (1)
	{
		get_String(word);
    30c6:	ce 01       	movw	r24, r28
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	0e 94 2e 19 	call	0x325c	; 0x325c <get_String>
		//LCD_displayString(word);
		fillList(word);
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	0e 94 76 18 	call	0x30ec	; 0x30ec <fillList>
		calc1();
    30d6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <calc1>
		calc2();
    30da:	0e 94 32 17 	call	0x2e64	; 0x2e64 <calc2>
		while(KEYPAD_getPressedKey() != 13);
    30de:	0e 94 65 09 	call	0x12ca	; 0x12ca <KEYPAD_getPressedKey>
    30e2:	8d 30       	cpi	r24, 0x0D	; 13
    30e4:	e1 f7       	brne	.-8      	; 0x30de <main+0x30>
		LCD_clearScreen();
    30e6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <LCD_clearScreen>
    30ea:	ed cf       	rjmp	.-38     	; 0x30c6 <main+0x18>

000030ec <fillList>:
	}

}

void fillList(uint8 *str)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	27 97       	sbiw	r28, 0x07	; 7
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	9f 83       	std	Y+7, r25	; 0x07
    3102:	8e 83       	std	Y+6, r24	; 0x06
	uint8 i =0;
    3104:	1d 82       	std	Y+5, r1	; 0x05
	uint32 sum=0;
    3106:	19 82       	std	Y+1, r1	; 0x01
    3108:	1a 82       	std	Y+2, r1	; 0x02
    310a:	1b 82       	std	Y+3, r1	; 0x03
    310c:	1c 82       	std	Y+4, r1	; 0x04
    310e:	91 c0       	rjmp	.+290    	; 0x3232 <fillList+0x146>
	while(str[i] != '=')
	{

		if ((str[i]>=48) && (str[i]<=57))
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	8e 81       	ldd	r24, Y+6	; 0x06
    3118:	9f 81       	ldd	r25, Y+7	; 0x07
    311a:	fc 01       	movw	r30, r24
    311c:	e2 0f       	add	r30, r18
    311e:	f3 1f       	adc	r31, r19
    3120:	80 81       	ld	r24, Z
    3122:	80 33       	cpi	r24, 0x30	; 48
    3124:	08 f4       	brcc	.+2      	; 0x3128 <fillList+0x3c>
    3126:	61 c0       	rjmp	.+194    	; 0x31ea <fillList+0xfe>
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	8e 81       	ldd	r24, Y+6	; 0x06
    3130:	9f 81       	ldd	r25, Y+7	; 0x07
    3132:	fc 01       	movw	r30, r24
    3134:	e2 0f       	add	r30, r18
    3136:	f3 1f       	adc	r31, r19
    3138:	80 81       	ld	r24, Z
    313a:	8a 33       	cpi	r24, 0x3A	; 58
    313c:	08 f0       	brcs	.+2      	; 0x3140 <fillList+0x54>
    313e:	55 c0       	rjmp	.+170    	; 0x31ea <fillList+0xfe>
		{
			sum = sum + (str[i] -48) ;
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	8e 81       	ldd	r24, Y+6	; 0x06
    3148:	9f 81       	ldd	r25, Y+7	; 0x07
    314a:	fc 01       	movw	r30, r24
    314c:	e2 0f       	add	r30, r18
    314e:	f3 1f       	adc	r31, r19
    3150:	80 81       	ld	r24, Z
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	c0 97       	sbiw	r24, 0x30	; 48
    3158:	9c 01       	movw	r18, r24
    315a:	44 27       	eor	r20, r20
    315c:	37 fd       	sbrc	r19, 7
    315e:	40 95       	com	r20
    3160:	54 2f       	mov	r21, r20
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	ab 81       	ldd	r26, Y+3	; 0x03
    3168:	bc 81       	ldd	r27, Y+4	; 0x04
    316a:	82 0f       	add	r24, r18
    316c:	93 1f       	adc	r25, r19
    316e:	a4 1f       	adc	r26, r20
    3170:	b5 1f       	adc	r27, r21
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	ab 83       	std	Y+3, r26	; 0x03
    3178:	bc 83       	std	Y+4, r27	; 0x04
			if ((str[i+1]>=48) && (str[i+1]<=57))
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9c 01       	movw	r18, r24
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	8e 81       	ldd	r24, Y+6	; 0x06
    3188:	9f 81       	ldd	r25, Y+7	; 0x07
    318a:	fc 01       	movw	r30, r24
    318c:	e2 0f       	add	r30, r18
    318e:	f3 1f       	adc	r31, r19
    3190:	80 81       	ld	r24, Z
    3192:	80 33       	cpi	r24, 0x30	; 48
    3194:	08 f1       	brcs	.+66     	; 0x31d8 <fillList+0xec>
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9c 01       	movw	r18, r24
    319e:	2f 5f       	subi	r18, 0xFF	; 255
    31a0:	3f 4f       	sbci	r19, 0xFF	; 255
    31a2:	8e 81       	ldd	r24, Y+6	; 0x06
    31a4:	9f 81       	ldd	r25, Y+7	; 0x07
    31a6:	fc 01       	movw	r30, r24
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	80 81       	ld	r24, Z
    31ae:	8a 33       	cpi	r24, 0x3A	; 58
    31b0:	98 f4       	brcc	.+38     	; 0x31d8 <fillList+0xec>
			{
				sum *=10;
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	ab 81       	ldd	r26, Y+3	; 0x03
    31b8:	bc 81       	ldd	r27, Y+4	; 0x04
    31ba:	2a e0       	ldi	r18, 0x0A	; 10
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsi3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	ab 83       	std	Y+3, r26	; 0x03
    31d4:	bc 83       	std	Y+4, r27	; 0x04
    31d6:	2a c0       	rjmp	.+84     	; 0x322c <fillList+0x140>
			}
			else
			{
				insertAtLast(sum);
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <insertAtLast>
				sum =0;
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	1a 82       	std	Y+2, r1	; 0x02
    31e4:	1b 82       	std	Y+3, r1	; 0x03
    31e6:	1c 82       	std	Y+4, r1	; 0x04
    31e8:	21 c0       	rjmp	.+66     	; 0x322c <fillList+0x140>
			}
		}
		else
		{
			sum += str[i];
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	ab 81       	ldd	r26, Y+3	; 0x03
    320a:	bc 81       	ldd	r27, Y+4	; 0x04
    320c:	82 0f       	add	r24, r18
    320e:	93 1f       	adc	r25, r19
    3210:	a4 1f       	adc	r26, r20
    3212:	b5 1f       	adc	r27, r21
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	ab 83       	std	Y+3, r26	; 0x03
    321a:	bc 83       	std	Y+4, r27	; 0x04
			insertAtLast(sum);
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <insertAtLast>
			sum = 0;
    3224:	19 82       	std	Y+1, r1	; 0x01
    3226:	1a 82       	std	Y+2, r1	; 0x02
    3228:	1b 82       	std	Y+3, r1	; 0x03
    322a:	1c 82       	std	Y+4, r1	; 0x04
		}
		i++;
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
    322e:	8f 5f       	subi	r24, 0xFF	; 255
    3230:	8d 83       	std	Y+5, r24	; 0x05

void fillList(uint8 *str)
{
	uint8 i =0;
	uint32 sum=0;
	while(str[i] != '=')
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	8e 81       	ldd	r24, Y+6	; 0x06
    323a:	9f 81       	ldd	r25, Y+7	; 0x07
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	80 81       	ld	r24, Z
    3244:	8d 33       	cpi	r24, 0x3D	; 61
    3246:	09 f0       	breq	.+2      	; 0x324a <fillList+0x15e>
    3248:	63 cf       	rjmp	.-314    	; 0x3110 <fillList+0x24>
			sum = 0;
		}
		i++;
	}
	//printList();
}
    324a:	27 96       	adiw	r28, 0x07	; 7
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <get_String>:

void get_String(uint8* word)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <get_String+0x6>
    3262:	00 d0       	rcall	.+0      	; 0x3264 <get_String+0x8>
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 button,i=0;
    326c:	19 82       	std	Y+1, r1	; 0x01

	do
	{
		button = KEYPAD_getPressedKey();
    326e:	0e 94 65 09 	call	0x12ca	; 0x12ca <KEYPAD_getPressedKey>
    3272:	8a 83       	std	Y+2, r24	; 0x02


		if ((button == '+') || (button == '-') || (button == '*') || (button == '%') || (button == '='))
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	8b 32       	cpi	r24, 0x2B	; 43
    3278:	61 f0       	breq	.+24     	; 0x3292 <get_String+0x36>
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	8d 32       	cpi	r24, 0x2D	; 45
    327e:	49 f0       	breq	.+18     	; 0x3292 <get_String+0x36>
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	8a 32       	cpi	r24, 0x2A	; 42
    3284:	31 f0       	breq	.+12     	; 0x3292 <get_String+0x36>
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	85 32       	cpi	r24, 0x25	; 37
    328a:	19 f0       	breq	.+6      	; 0x3292 <get_String+0x36>
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	8d 33       	cpi	r24, 0x3D	; 61
    3290:	89 f4       	brne	.+34     	; 0x32b4 <get_String+0x58>
		{
			if (button != '=') LCD_displayCharacter(button);
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	8d 33       	cpi	r24, 0x3D	; 61
    3296:	19 f0       	breq	.+6      	; 0x329e <get_String+0x42>
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
			word[i] = button;
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	fc 01       	movw	r30, r24
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	80 83       	st	Z, r24
    32b2:	10 c0       	rjmp	.+32     	; 0x32d4 <get_String+0x78>
		}
		else
		{

			LCD_intgerToString(button);
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_intgerToString>
			word[i] = button+48;
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	fc 01       	movw	r30, r24
    32ca:	e2 0f       	add	r30, r18
    32cc:	f3 1f       	adc	r31, r19
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	80 5d       	subi	r24, 0xD0	; 208
    32d2:	80 83       	st	Z, r24
		}
		i++;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	8f 5f       	subi	r24, 0xFF	; 255
    32d8:	89 83       	std	Y+1, r24	; 0x01

	}
	while(button != '=');
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	8d 33       	cpi	r24, 0x3D	; 61
    32de:	39 f6       	brne	.-114    	; 0x326e <get_String+0x12>
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <__mulsi3>:
    32ee:	62 9f       	mul	r22, r18
    32f0:	d0 01       	movw	r26, r0
    32f2:	73 9f       	mul	r23, r19
    32f4:	f0 01       	movw	r30, r0
    32f6:	82 9f       	mul	r24, r18
    32f8:	e0 0d       	add	r30, r0
    32fa:	f1 1d       	adc	r31, r1
    32fc:	64 9f       	mul	r22, r20
    32fe:	e0 0d       	add	r30, r0
    3300:	f1 1d       	adc	r31, r1
    3302:	92 9f       	mul	r25, r18
    3304:	f0 0d       	add	r31, r0
    3306:	83 9f       	mul	r24, r19
    3308:	f0 0d       	add	r31, r0
    330a:	74 9f       	mul	r23, r20
    330c:	f0 0d       	add	r31, r0
    330e:	65 9f       	mul	r22, r21
    3310:	f0 0d       	add	r31, r0
    3312:	99 27       	eor	r25, r25
    3314:	72 9f       	mul	r23, r18
    3316:	b0 0d       	add	r27, r0
    3318:	e1 1d       	adc	r30, r1
    331a:	f9 1f       	adc	r31, r25
    331c:	63 9f       	mul	r22, r19
    331e:	b0 0d       	add	r27, r0
    3320:	e1 1d       	adc	r30, r1
    3322:	f9 1f       	adc	r31, r25
    3324:	bd 01       	movw	r22, r26
    3326:	cf 01       	movw	r24, r30
    3328:	11 24       	eor	r1, r1
    332a:	08 95       	ret

0000332c <__divmodhi4>:
    332c:	97 fb       	bst	r25, 7
    332e:	09 2e       	mov	r0, r25
    3330:	07 26       	eor	r0, r23
    3332:	0a d0       	rcall	.+20     	; 0x3348 <__divmodhi4_neg1>
    3334:	77 fd       	sbrc	r23, 7
    3336:	04 d0       	rcall	.+8      	; 0x3340 <__divmodhi4_neg2>
    3338:	0c d0       	rcall	.+24     	; 0x3352 <__udivmodhi4>
    333a:	06 d0       	rcall	.+12     	; 0x3348 <__divmodhi4_neg1>
    333c:	00 20       	and	r0, r0
    333e:	1a f4       	brpl	.+6      	; 0x3346 <__divmodhi4_exit>

00003340 <__divmodhi4_neg2>:
    3340:	70 95       	com	r23
    3342:	61 95       	neg	r22
    3344:	7f 4f       	sbci	r23, 0xFF	; 255

00003346 <__divmodhi4_exit>:
    3346:	08 95       	ret

00003348 <__divmodhi4_neg1>:
    3348:	f6 f7       	brtc	.-4      	; 0x3346 <__divmodhi4_exit>
    334a:	90 95       	com	r25
    334c:	81 95       	neg	r24
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	08 95       	ret

00003352 <__udivmodhi4>:
    3352:	aa 1b       	sub	r26, r26
    3354:	bb 1b       	sub	r27, r27
    3356:	51 e1       	ldi	r21, 0x11	; 17
    3358:	07 c0       	rjmp	.+14     	; 0x3368 <__udivmodhi4_ep>

0000335a <__udivmodhi4_loop>:
    335a:	aa 1f       	adc	r26, r26
    335c:	bb 1f       	adc	r27, r27
    335e:	a6 17       	cp	r26, r22
    3360:	b7 07       	cpc	r27, r23
    3362:	10 f0       	brcs	.+4      	; 0x3368 <__udivmodhi4_ep>
    3364:	a6 1b       	sub	r26, r22
    3366:	b7 0b       	sbc	r27, r23

00003368 <__udivmodhi4_ep>:
    3368:	88 1f       	adc	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	5a 95       	dec	r21
    336e:	a9 f7       	brne	.-22     	; 0x335a <__udivmodhi4_loop>
    3370:	80 95       	com	r24
    3372:	90 95       	com	r25
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	08 95       	ret

0000337a <__prologue_saves__>:
    337a:	2f 92       	push	r2
    337c:	3f 92       	push	r3
    337e:	4f 92       	push	r4
    3380:	5f 92       	push	r5
    3382:	6f 92       	push	r6
    3384:	7f 92       	push	r7
    3386:	8f 92       	push	r8
    3388:	9f 92       	push	r9
    338a:	af 92       	push	r10
    338c:	bf 92       	push	r11
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	ca 1b       	sub	r28, r26
    33a4:	db 0b       	sbc	r29, r27
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	09 94       	ijmp

000033b2 <__epilogue_restores__>:
    33b2:	2a 88       	ldd	r2, Y+18	; 0x12
    33b4:	39 88       	ldd	r3, Y+17	; 0x11
    33b6:	48 88       	ldd	r4, Y+16	; 0x10
    33b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    33bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    33be:	8c 84       	ldd	r8, Y+12	; 0x0c
    33c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    33c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    33c4:	b9 84       	ldd	r11, Y+9	; 0x09
    33c6:	c8 84       	ldd	r12, Y+8	; 0x08
    33c8:	df 80       	ldd	r13, Y+7	; 0x07
    33ca:	ee 80       	ldd	r14, Y+6	; 0x06
    33cc:	fd 80       	ldd	r15, Y+5	; 0x05
    33ce:	0c 81       	ldd	r16, Y+4	; 0x04
    33d0:	1b 81       	ldd	r17, Y+3	; 0x03
    33d2:	aa 81       	ldd	r26, Y+2	; 0x02
    33d4:	b9 81       	ldd	r27, Y+1	; 0x01
    33d6:	ce 0f       	add	r28, r30
    33d8:	d1 1d       	adc	r29, r1
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	ed 01       	movw	r28, r26
    33e6:	08 95       	ret

000033e8 <malloc>:
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	bc 01       	movw	r22, r24
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	91 05       	cpc	r25, r1
    33f2:	10 f4       	brcc	.+4      	; 0x33f8 <malloc+0x10>
    33f4:	62 e0       	ldi	r22, 0x02	; 2
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	a0 91 82 00 	lds	r26, 0x0082
    33fc:	b0 91 83 00 	lds	r27, 0x0083
    3400:	ed 01       	movw	r28, r26
    3402:	e0 e0       	ldi	r30, 0x00	; 0
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	21 c0       	rjmp	.+66     	; 0x344e <malloc+0x66>
    340c:	88 81       	ld	r24, Y
    340e:	99 81       	ldd	r25, Y+1	; 0x01
    3410:	86 17       	cp	r24, r22
    3412:	97 07       	cpc	r25, r23
    3414:	69 f4       	brne	.+26     	; 0x3430 <malloc+0x48>
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	9b 81       	ldd	r25, Y+3	; 0x03
    341a:	30 97       	sbiw	r30, 0x00	; 0
    341c:	19 f0       	breq	.+6      	; 0x3424 <malloc+0x3c>
    341e:	93 83       	std	Z+3, r25	; 0x03
    3420:	82 83       	std	Z+2, r24	; 0x02
    3422:	04 c0       	rjmp	.+8      	; 0x342c <malloc+0x44>
    3424:	90 93 83 00 	sts	0x0083, r25
    3428:	80 93 82 00 	sts	0x0082, r24
    342c:	fe 01       	movw	r30, r28
    342e:	34 c0       	rjmp	.+104    	; 0x3498 <malloc+0xb0>
    3430:	68 17       	cp	r22, r24
    3432:	79 07       	cpc	r23, r25
    3434:	38 f4       	brcc	.+14     	; 0x3444 <malloc+0x5c>
    3436:	41 15       	cp	r20, r1
    3438:	51 05       	cpc	r21, r1
    343a:	19 f0       	breq	.+6      	; 0x3442 <malloc+0x5a>
    343c:	84 17       	cp	r24, r20
    343e:	95 07       	cpc	r25, r21
    3440:	08 f4       	brcc	.+2      	; 0x3444 <malloc+0x5c>
    3442:	ac 01       	movw	r20, r24
    3444:	fe 01       	movw	r30, r28
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	9b 81       	ldd	r25, Y+3	; 0x03
    344a:	9c 01       	movw	r18, r24
    344c:	e9 01       	movw	r28, r18
    344e:	20 97       	sbiw	r28, 0x00	; 0
    3450:	e9 f6       	brne	.-70     	; 0x340c <malloc+0x24>
    3452:	41 15       	cp	r20, r1
    3454:	51 05       	cpc	r21, r1
    3456:	a9 f1       	breq	.+106    	; 0x34c2 <malloc+0xda>
    3458:	ca 01       	movw	r24, r20
    345a:	86 1b       	sub	r24, r22
    345c:	97 0b       	sbc	r25, r23
    345e:	04 97       	sbiw	r24, 0x04	; 4
    3460:	08 f4       	brcc	.+2      	; 0x3464 <malloc+0x7c>
    3462:	ba 01       	movw	r22, r20
    3464:	e0 e0       	ldi	r30, 0x00	; 0
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	2a c0       	rjmp	.+84     	; 0x34be <malloc+0xd6>
    346a:	8d 91       	ld	r24, X+
    346c:	9c 91       	ld	r25, X
    346e:	11 97       	sbiw	r26, 0x01	; 1
    3470:	84 17       	cp	r24, r20
    3472:	95 07       	cpc	r25, r21
    3474:	f9 f4       	brne	.+62     	; 0x34b4 <malloc+0xcc>
    3476:	64 17       	cp	r22, r20
    3478:	75 07       	cpc	r23, r21
    347a:	81 f4       	brne	.+32     	; 0x349c <malloc+0xb4>
    347c:	12 96       	adiw	r26, 0x02	; 2
    347e:	8d 91       	ld	r24, X+
    3480:	9c 91       	ld	r25, X
    3482:	13 97       	sbiw	r26, 0x03	; 3
    3484:	30 97       	sbiw	r30, 0x00	; 0
    3486:	19 f0       	breq	.+6      	; 0x348e <malloc+0xa6>
    3488:	93 83       	std	Z+3, r25	; 0x03
    348a:	82 83       	std	Z+2, r24	; 0x02
    348c:	04 c0       	rjmp	.+8      	; 0x3496 <malloc+0xae>
    348e:	90 93 83 00 	sts	0x0083, r25
    3492:	80 93 82 00 	sts	0x0082, r24
    3496:	fd 01       	movw	r30, r26
    3498:	32 96       	adiw	r30, 0x02	; 2
    349a:	4f c0       	rjmp	.+158    	; 0x353a <malloc+0x152>
    349c:	ca 01       	movw	r24, r20
    349e:	86 1b       	sub	r24, r22
    34a0:	97 0b       	sbc	r25, r23
    34a2:	fd 01       	movw	r30, r26
    34a4:	e8 0f       	add	r30, r24
    34a6:	f9 1f       	adc	r31, r25
    34a8:	61 93       	st	Z+, r22
    34aa:	71 93       	st	Z+, r23
    34ac:	02 97       	sbiw	r24, 0x02	; 2
    34ae:	8d 93       	st	X+, r24
    34b0:	9c 93       	st	X, r25
    34b2:	43 c0       	rjmp	.+134    	; 0x353a <malloc+0x152>
    34b4:	fd 01       	movw	r30, r26
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	9c 01       	movw	r18, r24
    34bc:	d9 01       	movw	r26, r18
    34be:	10 97       	sbiw	r26, 0x00	; 0
    34c0:	a1 f6       	brne	.-88     	; 0x346a <malloc+0x82>
    34c2:	80 91 80 00 	lds	r24, 0x0080
    34c6:	90 91 81 00 	lds	r25, 0x0081
    34ca:	89 2b       	or	r24, r25
    34cc:	41 f4       	brne	.+16     	; 0x34de <malloc+0xf6>
    34ce:	80 91 76 00 	lds	r24, 0x0076
    34d2:	90 91 77 00 	lds	r25, 0x0077
    34d6:	90 93 81 00 	sts	0x0081, r25
    34da:	80 93 80 00 	sts	0x0080, r24
    34de:	40 91 78 00 	lds	r20, 0x0078
    34e2:	50 91 79 00 	lds	r21, 0x0079
    34e6:	41 15       	cp	r20, r1
    34e8:	51 05       	cpc	r21, r1
    34ea:	41 f4       	brne	.+16     	; 0x34fc <malloc+0x114>
    34ec:	4d b7       	in	r20, 0x3d	; 61
    34ee:	5e b7       	in	r21, 0x3e	; 62
    34f0:	80 91 74 00 	lds	r24, 0x0074
    34f4:	90 91 75 00 	lds	r25, 0x0075
    34f8:	48 1b       	sub	r20, r24
    34fa:	59 0b       	sbc	r21, r25
    34fc:	20 91 80 00 	lds	r18, 0x0080
    3500:	30 91 81 00 	lds	r19, 0x0081
    3504:	24 17       	cp	r18, r20
    3506:	35 07       	cpc	r19, r21
    3508:	b0 f4       	brcc	.+44     	; 0x3536 <malloc+0x14e>
    350a:	ca 01       	movw	r24, r20
    350c:	82 1b       	sub	r24, r18
    350e:	93 0b       	sbc	r25, r19
    3510:	86 17       	cp	r24, r22
    3512:	97 07       	cpc	r25, r23
    3514:	80 f0       	brcs	.+32     	; 0x3536 <malloc+0x14e>
    3516:	ab 01       	movw	r20, r22
    3518:	4e 5f       	subi	r20, 0xFE	; 254
    351a:	5f 4f       	sbci	r21, 0xFF	; 255
    351c:	84 17       	cp	r24, r20
    351e:	95 07       	cpc	r25, r21
    3520:	50 f0       	brcs	.+20     	; 0x3536 <malloc+0x14e>
    3522:	42 0f       	add	r20, r18
    3524:	53 1f       	adc	r21, r19
    3526:	50 93 81 00 	sts	0x0081, r21
    352a:	40 93 80 00 	sts	0x0080, r20
    352e:	f9 01       	movw	r30, r18
    3530:	61 93       	st	Z+, r22
    3532:	71 93       	st	Z+, r23
    3534:	02 c0       	rjmp	.+4      	; 0x353a <malloc+0x152>
    3536:	e0 e0       	ldi	r30, 0x00	; 0
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	cf 01       	movw	r24, r30
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

00003542 <free>:
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	09 f4       	brne	.+2      	; 0x354c <free+0xa>
    354a:	50 c0       	rjmp	.+160    	; 0x35ec <free+0xaa>
    354c:	ec 01       	movw	r28, r24
    354e:	22 97       	sbiw	r28, 0x02	; 2
    3550:	1b 82       	std	Y+3, r1	; 0x03
    3552:	1a 82       	std	Y+2, r1	; 0x02
    3554:	a0 91 82 00 	lds	r26, 0x0082
    3558:	b0 91 83 00 	lds	r27, 0x0083
    355c:	10 97       	sbiw	r26, 0x00	; 0
    355e:	09 f1       	breq	.+66     	; 0x35a2 <free+0x60>
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	ac 17       	cp	r26, r28
    3566:	bd 07       	cpc	r27, r29
    3568:	08 f1       	brcs	.+66     	; 0x35ac <free+0x6a>
    356a:	bb 83       	std	Y+3, r27	; 0x03
    356c:	aa 83       	std	Y+2, r26	; 0x02
    356e:	fe 01       	movw	r30, r28
    3570:	21 91       	ld	r18, Z+
    3572:	31 91       	ld	r19, Z+
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	ae 17       	cp	r26, r30
    357a:	bf 07       	cpc	r27, r31
    357c:	79 f4       	brne	.+30     	; 0x359c <free+0x5a>
    357e:	8d 91       	ld	r24, X+
    3580:	9c 91       	ld	r25, X
    3582:	11 97       	sbiw	r26, 0x01	; 1
    3584:	28 0f       	add	r18, r24
    3586:	39 1f       	adc	r19, r25
    3588:	2e 5f       	subi	r18, 0xFE	; 254
    358a:	3f 4f       	sbci	r19, 0xFF	; 255
    358c:	39 83       	std	Y+1, r19	; 0x01
    358e:	28 83       	st	Y, r18
    3590:	12 96       	adiw	r26, 0x02	; 2
    3592:	8d 91       	ld	r24, X+
    3594:	9c 91       	ld	r25, X
    3596:	13 97       	sbiw	r26, 0x03	; 3
    3598:	9b 83       	std	Y+3, r25	; 0x03
    359a:	8a 83       	std	Y+2, r24	; 0x02
    359c:	41 15       	cp	r20, r1
    359e:	51 05       	cpc	r21, r1
    35a0:	71 f4       	brne	.+28     	; 0x35be <free+0x7c>
    35a2:	d0 93 83 00 	sts	0x0083, r29
    35a6:	c0 93 82 00 	sts	0x0082, r28
    35aa:	20 c0       	rjmp	.+64     	; 0x35ec <free+0xaa>
    35ac:	12 96       	adiw	r26, 0x02	; 2
    35ae:	8d 91       	ld	r24, X+
    35b0:	9c 91       	ld	r25, X
    35b2:	13 97       	sbiw	r26, 0x03	; 3
    35b4:	ad 01       	movw	r20, r26
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	11 f0       	breq	.+4      	; 0x35be <free+0x7c>
    35ba:	dc 01       	movw	r26, r24
    35bc:	d3 cf       	rjmp	.-90     	; 0x3564 <free+0x22>
    35be:	fa 01       	movw	r30, r20
    35c0:	d3 83       	std	Z+3, r29	; 0x03
    35c2:	c2 83       	std	Z+2, r28	; 0x02
    35c4:	21 91       	ld	r18, Z+
    35c6:	31 91       	ld	r19, Z+
    35c8:	e2 0f       	add	r30, r18
    35ca:	f3 1f       	adc	r31, r19
    35cc:	ce 17       	cp	r28, r30
    35ce:	df 07       	cpc	r29, r31
    35d0:	69 f4       	brne	.+26     	; 0x35ec <free+0xaa>
    35d2:	88 81       	ld	r24, Y
    35d4:	99 81       	ldd	r25, Y+1	; 0x01
    35d6:	28 0f       	add	r18, r24
    35d8:	39 1f       	adc	r19, r25
    35da:	2e 5f       	subi	r18, 0xFE	; 254
    35dc:	3f 4f       	sbci	r19, 0xFF	; 255
    35de:	fa 01       	movw	r30, r20
    35e0:	31 83       	std	Z+1, r19	; 0x01
    35e2:	20 83       	st	Z, r18
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	9b 81       	ldd	r25, Y+3	; 0x03
    35e8:	93 83       	std	Z+3, r25	; 0x03
    35ea:	82 83       	std	Z+2, r24	; 0x02
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <itoa>:
    35f2:	fb 01       	movw	r30, r22
    35f4:	9f 01       	movw	r18, r30
    35f6:	e8 94       	clt
    35f8:	42 30       	cpi	r20, 0x02	; 2
    35fa:	c4 f0       	brlt	.+48     	; 0x362c <itoa+0x3a>
    35fc:	45 32       	cpi	r20, 0x25	; 37
    35fe:	b4 f4       	brge	.+44     	; 0x362c <itoa+0x3a>
    3600:	4a 30       	cpi	r20, 0x0A	; 10
    3602:	29 f4       	brne	.+10     	; 0x360e <itoa+0x1c>
    3604:	97 fb       	bst	r25, 7
    3606:	1e f4       	brtc	.+6      	; 0x360e <itoa+0x1c>
    3608:	90 95       	com	r25
    360a:	81 95       	neg	r24
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	64 2f       	mov	r22, r20
    3610:	77 27       	eor	r23, r23
    3612:	0e 94 a9 19 	call	0x3352	; 0x3352 <__udivmodhi4>
    3616:	80 5d       	subi	r24, 0xD0	; 208
    3618:	8a 33       	cpi	r24, 0x3A	; 58
    361a:	0c f0       	brlt	.+2      	; 0x361e <itoa+0x2c>
    361c:	89 5d       	subi	r24, 0xD9	; 217
    361e:	81 93       	st	Z+, r24
    3620:	cb 01       	movw	r24, r22
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	a1 f7       	brne	.-24     	; 0x360e <itoa+0x1c>
    3626:	16 f4       	brtc	.+4      	; 0x362c <itoa+0x3a>
    3628:	5d e2       	ldi	r21, 0x2D	; 45
    362a:	51 93       	st	Z+, r21
    362c:	10 82       	st	Z, r1
    362e:	c9 01       	movw	r24, r18
    3630:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <strrev>

00003634 <strrev>:
    3634:	dc 01       	movw	r26, r24
    3636:	fc 01       	movw	r30, r24
    3638:	67 2f       	mov	r22, r23
    363a:	71 91       	ld	r23, Z+
    363c:	77 23       	and	r23, r23
    363e:	e1 f7       	brne	.-8      	; 0x3638 <strrev+0x4>
    3640:	32 97       	sbiw	r30, 0x02	; 2
    3642:	04 c0       	rjmp	.+8      	; 0x364c <strrev+0x18>
    3644:	7c 91       	ld	r23, X
    3646:	6d 93       	st	X+, r22
    3648:	70 83       	st	Z, r23
    364a:	62 91       	ld	r22, -Z
    364c:	ae 17       	cp	r26, r30
    364e:	bf 07       	cpc	r27, r31
    3650:	c8 f3       	brcs	.-14     	; 0x3644 <strrev+0x10>
    3652:	08 95       	ret

00003654 <_exit>:
    3654:	f8 94       	cli

00003656 <__stop_program>:
    3656:	ff cf       	rjmp	.-2      	; 0x3656 <__stop_program>
